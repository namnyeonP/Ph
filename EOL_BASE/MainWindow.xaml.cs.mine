
using EOL_BASE.모듈;
using EOL_BASE.윈도우;
using EOL_BASE.클래스;
using Microsoft.Win32;
using MiniScheduler;
using Peak.Can.Basic;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;




namespace EOL_BASE
{

    #region Enum

    public enum DSPType
    {
        DSP_28335=0,
        DSP_28377=1,
        DSP_28377_SDI=2
    }

    public enum LogType
    {
        Info = 0,
        Fail = 1,
        Success = 2,
        Pass = 3,
        NG = 4,
        TEST = 5,
        CAN = 6,
        EMERGENCY = 7,
        RESPONSE = 8,
        REQUEST = 9,
        MANUALCONDITION = 10,
        PLC_RECV = 11,
        PLC_SEND = 12,
    }


    public enum CMD
    {
        INPUT_MC_ON,
        OUTPUT_MC_ON,
        CHARGE,
        DISCHARGE,
        OUTPUT_MC_OFF,
        REST,
        NULL
    }

    public enum OPMode
    {
        READY,
        CHARGE_CC,
        CHARGE_CV,
        DISCHARGE_CC,
        DISCHARGE_CV,
        CHARGE_CP,
        DISCHARGE_CP,
        NULL
    }

    public enum RECV_OPMode
    {
        READY,
        READY_TO_INPUT,
        READY_TO_CHARGE,
        CHARGE_CC,
        CHARGE_CV,
        DISCHARGE_CC,
        DISCHARGE_CV,
        CHARGE_CP,
        DISCHARGE_CP,
        COMPLETE,
        NULL
    }

    public enum BranchMode
    {
        CHANNEL1,
        CHANNEL2
    }

    #endregion

    /// <summary>
    /// MainWindow.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class MainWindow : Window
    {
        SafetyCyclerSetting scs = new SafetyCyclerSetting();

        #region Field

        /// <summary>
        /// 검사 항목 간 여유 시간
        /// </summary>
        int autobtwtick = 50;
        
        /// <summary>
        /// 각종 윈도우 및 모드 변경시 필요 비번
        /// </summary>
        public string passWord = "";

        string logaddr = @"C:\Users\Public\EOL_INSPECTION_LOG";

        static string FILE_PATH_INSPECTION_RESULT = "c:\\Logs\\Inspection_result\\";

        /// <summary>
        /// 자동시작시에 흐르는 시간변수
        /// </summary>
        DateTime elapsedtime, nowTime;

        public Thread autoModeThread;
        public List<Process> totalProcessList = new List<Process>();
                
        /// <summary>
        /// 충방전을 위한 스케줄러 윈도우
        /// </summary>
        MiniScheduler.MainWindow mmw;

        public List<Models> modelList = new List<Models>();                
        public string Barcode = "";
        public int selectedIndex = -1;
        
        public bool isNeedDCIR = true;
        public bool isMESskip = false;
        public bool isStop = false;
        public bool isManual = false;
        //190108 by grchoi
        public string MonoFrame = "";

        private delegate void ReadDelegateHandler();

        public List<CellDetail> cellDetailList = new List<CellDetail>();
        public List<OcvDetail> ocvDetailList = new List<OcvDetail>();
        public List<string> dtcList = new List<string>();

        AmbientTemperatureSpecWindow atsw = new AmbientTemperatureSpecWindow();
        AmbientTempSetting setting = new AmbientTempSetting();

        /// <summary>
        /// BMS와 데이터 통신 시 해당 리스트에 계속 새로고침된다.
        /// </summary>
        public Dictionary<string, ReceiveType> bmsList = new Dictionary<string, ReceiveType>();

        public static string _BARCODE = "Barcode Reading";

        [DllImport("kernel32")]
        private static extern long WritePrivateProfileString(string section, string key, string val, string filePath);
        [DllImport("kernel32")]
        private static extern int GetPrivateProfileString(string section, string key, string def, StringBuilder retVal, int size, string filePath);

        Dictionary<string, List<TestItem>> sdic = new Dictionary<string, List<TestItem>>();
        
        public CChroma chroma;
        public CCycler cycler;
        public CNhtRS232_Receiver temps;
        public CRelay_Receiver relays;
        public CLambdaPower becm_power;
        public CLambdaPower pump_power;
        private CMES MES;
        public CKeysightDMM keysight;
        public CDAQ daq;
        public CPLC plc;
        public CBMS_CAN Hybrid_Instru_CAN;

        System.Windows.Forms.Timer timetick = new System.Windows.Forms.Timer();

        public int counter_Cycler = 0;
        public int counter_Cycler_limit = 50000;
        
        public string mesIP = "10.32.169.81";
        public string mesPort = "619";
        public string dmmIP = "169.254.4.61";
        public string dmmPort = "5025";

        public string chroma_PortName = "COM3";
        public string power_PortName1 = "COM9";
        public string power_PortName2 = "COM8";
        public string nht_PortName = "COM3";

        public string can_bms = "PCAN_PCI: 1 (41h)";
        public string can_cycler1 = "PCAN_PCI: 2 (42h)";

        public int INSULATION_RESISTANCE_VOLT = 500;
        public int INSULATION_RESISTANCE_TIME = 10;

        public string PLC_RECV_ADDRESS = "BA00";
        public string PLC_SEND_ADDRESS = "BA10";
        public string PLC_BCRS_ADDRESS = "WA0";
        public int PLC_LOGICAL_NUMBER = 0;

        //not used
        public string keysight_PortName = "COM3";        
        public string daq_PortName = "COM11";
        public string omega_PortName = "COM11";
        public string can_cycler2 = "PCAN_USB:FD 8 (58h)";
        public string can_bms2 = "PCAN_PCI: 2 (42h)";

        //190103 by grchoi
        private bool mesdisflag = false;

        //190104 by grchoi
        string deviceStatus = "";

        #endregion

        #region Registers
        public void Counter_Cycler()
        {
            string regSubkey = "Software\\EOL_Trigger";

            //Microsoft.Win32.Registry.CurrentUser.DeleteSubKey(regSubkey);   

            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
            //rk.SetValue("Access_DMM", "0");                        
            var regStr = rk.GetValue("COMMON_Counter_Cycler") as string;
            var regStr2 = rk.GetValue("COMMON_Counter_Cycler_Limit") as string;

            if (regStr == null)
            {
                rk.SetValue("COMMON_Counter_Cycler", "0");
                counter_Cycler = 0;
            }
            else
            {
                counter_Cycler = int.Parse(regStr);
            }

            if (regStr2 == null)
            {
                rk.SetValue("COMMON_Counter_Cycler_Limit", "50000");
                counter_Cycler_limit = 50000;
            }
            else
            {
                counter_Cycler_limit = int.Parse(regStr2);
            }

            LogState(LogType.Info, "Cycler Current Count :" + counter_Cycler.ToString());
        }

        /// <summary>
        /// 정상적으로 끝난 경우에만 카운터가 올라간다
        /// </summary>
        public void SetCounter_Cycler()
        {
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);

            rk.SetValue("COMMON_Counter_Cycler", counter_Cycler.ToString());
        }

        public void SetCounter_Cycle_Limit()
        {
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);

            rk.SetValue("COMMON_Counter_Cycler_Limit", counter_Cycler_limit.ToString());
        }

        public void SetCEIPathOffset()
        {
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);

            rk.SetValue("CEI_PATH_OFFSET", ceiPathOffset.ToString());
        }

        /// <summary>
        /// 사용중 : true
        /// 비사용중 : false
        /// </summary>
        /// <returns></returns>
        public bool GetCyclerFlag()
        {
            string regSubkey = "Software\\EOL_Trigger";

            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);

            var regStr = rk.GetValue("CYCLER_USING") as string;

            return regStr == "0" ? false : true;
        }

        public void SetEnableCyclerFlag()
        {
            //this.Dispatcher.BeginInvoke(new Action(() =>
            //{
            //    cyclerBlinder.Visibility = System.Windows.Visibility.Collapsed;
            //}));

            LogState(LogType.Info, "Enable [CYCLER_USING] Flag");
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
            rk.SetValue("CYCLER_USING", "1");
        }

        public void SetDisableCyclerFlag()
        {
            //this.Dispatcher.BeginInvoke(new Action(() =>
            //{
            //    cyclerBlinder.Visibility = System.Windows.Visibility.Visible;
            //}));

            LogState(LogType.Info, "Disable [CYCLER_USING] Flag");
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
            rk.SetValue("CYCLER_USING", "0");
        }

        public void SetLocalData()
        {
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
            int cnt = 1;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_EQUIP_ID", equipID); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_PRODUCT_ID", prodID); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_PROCESS_ID", procID); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_MES_IP", mesIP); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_MES_PORT", mesPort); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_DMM_IP", dmmIP); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_DMM_PORT", dmmPort); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_POWER1_PORT", power_PortName1); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_POWER2_PORT", power_PortName2); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_TEMP_PORT", nht_PortName); cnt++;

            rk.SetValue(position + "_" + cnt.ToString("D2") + "_CAN_CYCLER", can_cycler1); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_CAN_CYCLER", can_cycler2); cnt++;

            rk.SetValue(position + "_" + cnt.ToString("D2") + "_PLC_RECV_ADDRESS", PLC_RECV_ADDRESS); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_PLC_SEND_ADDRESS", PLC_SEND_ADDRESS); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_PLC_BCRS_ADDRESS", PLC_BCRS_ADDRESS); cnt++;
            rk.SetValue(position + "_" + cnt.ToString("D2") + "_PLC_LOGICAL_NUMBER", PLC_LOGICAL_NUMBER.ToString()); cnt++;

            //추가 레지스터가 필요하다면, 해당 부분에 추가
            rk.SetValue("CYCLER_USING", "0");
            //rk.SetValue("CEI_PATH_OFFSET", "0.2");
        }

        public void LoadLocalData()
        {
            try
            {
                string regSubkey = "Software\\EOL_Trigger";
                RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
                this.Title = this.Title + " - " + MODEL_NAME +","+ position + "  (" + lastUpdated + ")";

                int cnt = 1;
                equipID = rk.GetValue(position + "_" + cnt.ToString("D2") + "_EQUIP_ID") as string; cnt++;
                //1. 모델별 제품ID 레지스트리 구분 및 호출
                prodID_12S = rk.GetValue(position + "_" + cnt.ToString("D2") + "_12S_PRODUCT_ID") as string;
                prodID_14S = rk.GetValue(position + "_" + cnt.ToString("D2") + "_14S_PRODUCT_ID") as string; cnt++;
                procID = rk.GetValue(position + "_" + cnt.ToString("D2") + "_PROCESS_ID") as string; cnt++;
                mesIP = rk.GetValue(position + "_" + cnt.ToString("D2") + "_MES_IP") as string; cnt++;
                mesPort = rk.GetValue(position + "_" + cnt.ToString("D2") + "_MES_PORT") as string; cnt++;
                dmmIP = rk.GetValue(position + "_" + cnt.ToString("D2") + "_DMM_IP") as string; cnt++;
                dmmPort = rk.GetValue(position + "_" + cnt.ToString("D2") + "_DMM_PORT") as string; cnt++;
                power_PortName1 = rk.GetValue(position + "_" + cnt.ToString("D2") + "_POWER1_PORT") as string; cnt++;
                power_PortName2 = rk.GetValue(position + "_" + cnt.ToString("D2") + "_POWER2_PORT") as string; cnt++;
                nht_PortName = rk.GetValue(position + "_" + cnt.ToString("D2") + "_TEMP_PORT") as string; cnt++;

                can_cycler1 = rk.GetValue(position + "_" + cnt.ToString("D2") + "_CAN_CYCLER") as string; cnt++;
                can_cycler2 = rk.GetValue(position + "_" + cnt.ToString("D2") + "_CAN_CYCLER") as string; cnt++;

                PLC_RECV_ADDRESS = rk.GetValue(position + "_" + cnt.ToString("D2") + "_PLC_RECV_ADDRESS") as string; cnt++;
                PLC_SEND_ADDRESS = rk.GetValue(position + "_" + cnt.ToString("D2") + "_PLC_SEND_ADDRESS") as string; cnt++;
                PLC_BCRS_ADDRESS = rk.GetValue(position + "_" + cnt.ToString("D2") + "_PLC_BCRS_ADDRESS") as string; cnt++;
                PLC_LOGICAL_NUMBER = int.Parse(rk.GetValue(position + "_" + cnt.ToString("D2") + "_PLC_LOGICAL_NUMBER") as string);

                //추가 레지스터가 필요하다면, 해당 부분에 추가
                //ceiPathOffset = double.Parse(rk.GetValue("CEI_PATH_OFFSET").ToString());
            }
            catch (Exception ec)
            {
                SetLocalData();
            }
        }

        #endregion

        #region 값 판정 부분

        public static string _DEVICE_NOT_READY = "DEVICE_NOT_READY";
        public static string _VALUE_NOT_MATCHED = "VALUE_NOT_MATCHED";
        public static string _TEMP_OVER = "AMBIENT_TEMP_OVER";
        public static string _NOT_POS_MSG = "NOT_POSITIVE_MSG";
        public static string _NOT_NEG_MSG = "NOT_NEGATIVE_MSG";
        public static string _NOT_MODE_CHANGED = "NOT_MODE_CHANGED";

        /// <summary>
        /// 값을 비교하고 판정때리는 함수
        /// 값을 하나만 해서 동일판정일때는 min을 -1로 하고 설정값은 max에 둔다.
        /// 값이 하나인경우 1이 true, 0이 false로 친다
        /// </summary>
        /// <param name="ti"></param>
        /// <returns></returns>
        private bool JudgementTestItem(TestItem ti)
        {
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                if (isManual)
                    blinder.Visibility = System.Windows.Visibility.Hidden;
            }));

            isProcessingFlag = false;
            double itemVal = 0;

            //2. 검사항목 중 바코드 판정 시 All pass 적용
            if(ti.Name == _BARCODE)
            {
                ti.Result = "PASS";
                return true;
            }

            //if (ti.Max.ToString() == "0" && ti.Min.ToString() == "0")
            //{
            //    ti.Result = "PASS";
            //    StringBuilder sb = new StringBuilder();
            //    sb.Append("Test :");
            //    sb.Append(ti.Name);
            //    sb.Append(" End - Pass [Value:");
            //    sb.Append(ti.Value_);
            //    sb.Append("]");
            //    this.LogState(LogType.Pass, sb.ToString());
            //    return true;
            //}

            //3.검사 판정 시 EMG인 경우 NG로 강제 적용(절연저항 측정 / DCIR 측정 등 인경우)
            if (ti.Value_ == null
                || ti.Value_.ToString() == "EMG"
                || ti.Value_.ToString() == _DEVICE_NOT_READY
                || ti.Value_.ToString() == _VALUE_NOT_MATCHED
                || ti.Value_.ToString() == _TEMP_OVER
                || ti.Value_.ToString() == _NOT_POS_MSG
                || ti.Value_.ToString() == _NOT_NEG_MSG
                || ti.Value_.ToString() == _NOT_MODE_CHANGED)
            {                
                if(ti.Value_ == null)
                    ti.Value_ = "NULL";

                ti.Result = "NG";
                StringBuilder sb = new StringBuilder();
                sb.Append("Test :");
                sb.Append(ti.Name);
                sb.Append(" End - NG [Min:");
                sb.Append(ti.Min.ToString());
                sb.Append("][Value:");
                sb.Append(ti.Value_);
                sb.Append("][Max:");
                sb.Append(ti.Max.ToString());
                sb.Append("]");
                this.LogState(LogType.NG, sb.ToString());

                if (isSkipNG_)
                {
                    return true;
                }

                return false;
            }

            if (double.TryParse(ti.Value_.ToString(), out itemVal))
                ti.Value_ = itemVal = double.Parse(itemVal.ToString("N3"));

            var d_max = 0.0;
            var d_min = 0.0;
            var rst1 = double.TryParse(ti.Max.ToString(), out d_max);
            var rst2 = double.TryParse(ti.Min.ToString(), out d_min);

            if (!rst1 && !rst2)
            {
                if (ti.Max.ToString() == ti.Value_.ToString() && ti.Min.ToString() == ti.Value_.ToString())
                {
                    ti.Result = "PASS";
                    StringBuilder sb = new StringBuilder();
                    sb.Append("Test :");
                    sb.Append(ti.Name);
                    sb.Append(" End - Pass [Min:");
                    sb.Append(ti.Min.ToString());
                    sb.Append("][Value:");
                    sb.Append(ti.Value_);
                    sb.Append("][Max:");
                    sb.Append(ti.Max.ToString());
                    sb.Append("]");
                    this.LogState(LogType.Pass, sb.ToString());
                    return true;
                }
                else
                {
                    ti.Result = "NG";
                    StringBuilder sb = new StringBuilder();
                    sb.Append("Test :");
                    sb.Append(ti.Name);
                    sb.Append(" End - NG [Min:");
                    sb.Append(ti.Min.ToString());
                    sb.Append("][Value:");
                    sb.Append(ti.Value_);
                    sb.Append("][Max:");
                    sb.Append(ti.Max.ToString());
                    sb.Append("]");
                    this.LogState(LogType.NG, sb.ToString());

                    if (isSkipNG_)
                    {
                        return true;
                    }

                    return false;
                }
            }

            if (d_max >= itemVal && d_min <= itemVal)
            {
                ti.Result = "PASS";
                StringBuilder sb = new StringBuilder();
                sb.Append("Test :");
                sb.Append(ti.Name);
                sb.Append(" End - Pass [Min:");
                sb.Append(ti.Min.ToString());
                sb.Append("][Value:");
                sb.Append(ti.Value_);
                sb.Append("][Max:");
                sb.Append(ti.Max.ToString());
                sb.Append("]");
                this.LogState(LogType.Pass, sb.ToString());
                return true;
            }
            else
            {
                ti.Result = "NG";
                StringBuilder sb = new StringBuilder();
                sb.Append("Test :");
                sb.Append(ti.Name);
                sb.Append(" End - NG [Min:");
                sb.Append(ti.Min.ToString());
                sb.Append("][Value:");
                sb.Append(ti.Value_);
                sb.Append("][Max:");
                sb.Append(ti.Max.ToString());
                sb.Append("]");
                this.LogState(LogType.NG, sb.ToString());

                if (isSkipNG_)
                {
                    return true;
                }

                return false;
            }
        }

        #endregion

        #region Multi Models

        /// <summary>
        /// -1:DUMMY
        /// 0:12S
        /// 2:14S 
        /// </summary>
        public int localTypes = 0;

        

        private void sideChangedUp(object sender, MouseButtonEventArgs e)
        {
            var lb = sender as Label;

            this.ChangeUIModes(lb.Name.ToString());

            this.LoadList();

            //MES 연결되어있으면 스펙받는다
            LogToCollect(SpecInitToMES());
            //MES 연결되어있으면 스펙받는다
            if (MES.isMESConnected)
            {
                ControlSpecInitToMES(MES.GetProcessControlParameterRequest(this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].ProdId, this.modelList[selectedIndex].ProcId));
            }
            else
            {
                LogToControl();
            }

            this.testItemListDg.Items.Refresh();
        }

        public void AutoMode_change(string mode_name)
        {
            //181217 begin인 경우는 MES 스펙 받아올때랑 꼬이는 경우가 있다!!
            this.Dispatcher.Invoke(new Action(() =>
            {
                this.ChangeUIModes(mode_name);

                this.LoadList();

                this.testItemListDg.Items.Refresh();
            }));
        }

        private void entranceDummyMode(object sender, MouseButtonEventArgs e)
        {
            this.AutoMode_change("dummy");
        }

        //190104 by grchoi
        public void ChangeUIModes_Init()
        {
            string initLbName = "";

            if (type1lb.Background == Brushes.SkyBlue)
            {
                initLbName = type1lb.Name.ToString();
            }
            else if (type3lb.Background == Brushes.SkyBlue)
            {
                initLbName = type3lb.Name.ToString();
            }
            else
            {
                initLbName = "dummy";
            }

            switch (initLbName)
            {
                case "type1lb":
                    type1lb.Background = Brushes.SkyBlue; type2lb.Background = Brushes.Gray; type3lb.Background = Brushes.Gray; localTypes = 0;
                    this.prodTb.Text = prodID_12S;
                    modelList[selectedIndex].ProdId = prodID_12S;
                    modelList[selectedIndex].ModelId = "12s";//190105 grchoi
                    LogState(LogType.Info, "12S Mode");
                    break;
                case "type3lb":
                    type3lb.Background = Brushes.SkyBlue; type1lb.Background = Brushes.Gray; type2lb.Background = Brushes.Gray; localTypes = 2;
                    this.prodTb.Text = prodID_14S;
                    modelList[selectedIndex].ProdId = prodID_14S;
                    modelList[selectedIndex].ModelId = "8s";//190105 grchoi
                    LogState(LogType.Info, "8S Mode");
                    break;
                case "dummy":
                    type1lb.Background = type2lb.Background = type3lb.Background = Brushes.SkyBlue; localTypes = -1;
                    this.prodTb.Text = prodID_12S;
                    modelList[selectedIndex].ProdId = prodID_12S;
                    modelList[selectedIndex].ModelId = "DUMMY";//190105 grchoi
                    LogState(LogType.Info, "NG MASTER Mode ");
                    break;
            }
        }

        public void ChangeUIModes(string mode_name)
        {
            //5.
            //- 모델 체인지 시 Model ID 변경되도록 추가
            //-모델 체인지 시 수동으로 변경한 모델별 제품ID 적용을 위해 Reg 값 호출 추가

            //190107 by grchoi : 모델별로 따로 저장하는 경우 이 부분에서 다시 불러와야함            
            string regSubkey = "Software\\EOL_Trigger";
            RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
            prodID_12S = rk.GetValue(position + "_02_12S_PRODUCT_ID") as string;
            prodID_14S = rk.GetValue(position + "_02_14S_PRODUCT_ID") as string;

            switch (mode_name)
            {
                case "type1lb":
                    //type1lb.Background = Brushes.SkyBlue; type2lb.Background = Brushes.Gray; type3lb.Background = Brushes.Gray; localTypes = 0;
                    LogState(LogType.Info, "12S Mode");
                    this.prodTb.Text = prodID_12S;
                    modelList[selectedIndex].ProdId = prodID_12S;
                    break;
                //case "type2lb": type2lb.Background = Brushes.SkyBlue; type1lb.Background = Brushes.Gray; type3lb.Background = Brushes.Gray; localTypes = 1;
                //    LogState(LogType.Info, "GEN1 Mode");

                //    if (lotTb.Text.ToString().Substring(3, 1) == "M")
                //    {
                //        this.prodTb.Text = prodID_Gen1;
                //        modelList[selectedIndex].ProdId = prodID_Gen1;
                //    }
                //    else
                //    {
                //        this.prodTb.Text = prodID_Gen2;
                //        modelList[selectedIndex].ProdId = prodID_Gen2;
                //    }

                //    break;
                case "type3lb":
                    //type3lb.Background = Brushes.SkyBlue; type1lb.Background = Brushes.Gray; type2lb.Background = Brushes.Gray; localTypes = 2;
                    LogState(LogType.Info, "14S Mode");
                    this.prodTb.Text = prodID_14S;
                    modelList[selectedIndex].ProdId = prodID_14S;

                    break;
                case "dummy":
                    //type1lb.Background = type2lb.Background = type3lb.Background = Brushes.SkyBlue; localTypes = -1;
                    LogState(LogType.Info, "NG MASTER Mode ");
                    this.prodTb.Text = prodID_12S;
                    modelList[selectedIndex].ProdId = prodID_12S;
                    break;

            }
        }

        #endregion

        /// <summary>
        /// 로그로 저장될 폴더명
        /// </summary>
        string MODEL_NAME = "EOL_BASE";

        /// <summary>
        /// Cycler DSP Types
        /// </summary>
        public DSPType dsp_Type = DSPType.DSP_28335;

        /// <summary>
        /// last updated date (Recommanded)
        /// </summary>
        public string lastUpdated = "181218";

        /// <summary>
        /// 기본 Equip ID
        /// </summary>
        public string equipID = "123412341-12-1";
        public string prodID = "";
        /// <summary>
        /// 기본 Prod ID
        /// </summary>
        public string prodID_12S = "";
        /// <summary>
        /// 기본 Prod ID
        /// </summary>
        public string prodID_14S = "";

        /// <summary>
        /// 기본 Equip ID
        /// </summary>
        public string procID = "P0000";

        public bool withstandRetry = false;
        bool isNeedOCVFlag = false;
        public MainWindow()
        {
            InitializeComponent();

            LoadINI(AppDomain.CurrentDomain.BaseDirectory + "config.ini");
            //SetLocalData(); //초기 1회는 셋을 해줘야 함
            LoadLocalData();
            
            InitializeCommonMethods();
            InitializeSaveFileAddr();
            Counter_Cycler();
        }

        void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            SetUI();

            //190104 by grchoi
            //4. 초기화 시 ChangeUIModes 함수 보완을 위해 Model ID 등의 입력 정보를 위해 추가
            //   함수 적용 : ChangeUIModes_Init
            ChangeUIModes_Init();

            SetModules();           

            LoadList();

            LogToCollect(SpecInitToMES());

            if (MES.isMESConnected)
            {
                ControlSpecInitToMES(MES.GetProcessControlParameterRequest(this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].ProdId, this.modelList[selectedIndex].ProcId));
            }
            else
            {
                LogToControl();
            }

            #region Regedit Start
            var th = new Thread(() =>
                {
                    string regSubkey = "Software\\EOL_Trigger";

                    //Microsoft.Win32.Registry.CurrentUser.DeleteSubKey(regSubkey);

                    RegistryKey rk = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(regSubkey);
                    //rk.SetValue("Access_DMM", 0);
                    var regStr = rk.GetValue("ManuallyStart") as string;
                    while (true)
                    {
                        regStr = rk.GetValue("ManuallyStart") as string;

                        Thread.Sleep(100);

                        if (regStr == "1")
                        {
                            //시작
                            this.Dispatcher.Invoke(new Action(() =>
                                {
                                    this.AutoMode();
                                }));

                            Thread.Sleep(3000);

                            rk.SetValue("ManuallyStart", "0");
                        }
                    }
                });
            th.Start();
            #endregion

            // 온도보정식 설정
            atsw.LoadSetting();
            atsw.LoadSpec(setting);

            // 충방전 안전 스펙 설정 로드
            // 여기서는 eol_config.ini에 있는 cycler 안전 스펙을 로드하고
            // 실제 사용하는 부분은 MES에서 스펙을 내려받을 때 비교하도록 설정한다.
            scs.LoadSafetyCyclerSpec();
        }
        
        private void SetModules()
        {
            //181217 mes가 연결되있을 때 릴레이가 초기화가 안되어있으면 터지는거 때문에 수정
            relays = new CRelay_Receiver(this);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                MESConnect();
            }),null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                keysight = new CKeysightDMM(this, "169.254.4.61", 5025);
            }), null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                plc = new CPLC(this, PLC_RECV_ADDRESS, PLC_SEND_ADDRESS, PLC_BCRS_ADDRESS, PLC_LOGICAL_NUMBER);
            }), null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                Hybrid_Instru_CAN = new CBMS_CAN(this, can_bms, true);
                cycler = new CCycler(this, this.can_cycler1);//pcan
            }), null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                temps = new CNhtRS232_Receiver(this);
            }), null);
            
            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                daq = new CDAQ(this, daq_PortName);
            }), null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                becm_power = new CLambdaPower(this, power_PortName1, "13.900", "5.000");
            }), null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                chroma = new CChroma(this, this.chroma_PortName);
            }), null);

            ThreadPool.QueueUserWorkItem(new WaitCallback(delegate(object state)
            {
                pump_power = new CLambdaPower(this, power_PortName2, "13.900", "10.000");
            }), null); 

        }

        private void SetUI()
        {
            selectedIndex = 0;

            modelList.Add(new Models()
            {
                Number = "0",
                ProdId = prodID,
                ProcId = procID,
                EquipId = equipID,
                UserId = "EIF",
                ModelId = MODEL_NAME,
                LotId = "NOT_LOT_ID"
            });

            mmw = new MiniScheduler.MainWindow(this);
            this.totalProcessList = mmw.totalProcessList;
            
            this.prodTb.Text = this.modelList[selectedIndex].ProdId;//제품 ID
            this.procTb.Text = this.modelList[selectedIndex].ProcId;//공정ID
            this.userTb.Text = this.modelList[selectedIndex].UserId;

            cellDetailList.Clear();
            cellDetailList.Add(new CellDetail() { TestName = "Init Volt" });
            cellDetailList.Add(new CellDetail() { TestName = "Discharge" });
            cellDetailList.Add(new CellDetail() { TestName = "Rest" });
            cellDetailList.Add(new CellDetail() { TestName = "Charge" });
            cellDetailList.Add(new CellDetail() { TestName = "Finish Volt" });
            ClearCellDetailList();

            CellDetailDg.ItemsSource = cellDetailList;

            if (isNeedOCVFlag)
            {
                isNeedOCV.Height = new GridLength(80);
                ocvDetailList.Clear();
                ocvDetailList.Add(new OcvDetail() { TestName = "OCV Voltage" });
                ocvDetailList.Add(new OcvDetail() { TestName = "After DCIR Delta Voltage" });
                ClearOcvDetailList();

                OCVDetailDg.ItemsSource = ocvDetailList;
            }
        }

        public void ClearOcvDetailList()
        {
            foreach (var item in ocvDetailList)
            {
                item.CellVolt_1 = item.CellVolt_2 = item.CellVolt_3 = item.CellVolt_4 = item.CellVolt_5 = item.CellVolt_6 = item.CellVolt_7 = item.CellVolt_8 = 0.0;
            }
        }
        
        private void InitializeSaveFileAddr()
        {
            DirectoryInfo di = new DirectoryInfo(logaddr);
            if (di.Exists == false)
            {
                di.Create();
            }
            
            string @LogDirectory = @"C:\Logs\Inspection_result\" + MODEL_NAME;

            if (!Directory.Exists(@LogDirectory))
            {
                Directory.CreateDirectory(@LogDirectory);
            }

            @LogDirectory = @"C:\Users\Public\EOL_INSPECTION_LOG";

            if (!Directory.Exists(@LogDirectory))
            {
                Directory.CreateDirectory(@LogDirectory);
            }
        }

        private void InitializeCommonMethods()
        {
            bt_pass.Content = "-";
            bt_pass.Background = Brushes.DarkGray;
            timetick.Interval = 100;
            timetick.Tick += ti_Tick;
            this.Loaded += MainWindow_Loaded;
            //this.KeyDown += MainWindow_KeyDown;
            this.Closed += MainWindow_Closed;
            this.Closing += MainWindow_Closing;
            this.KeyDown += MainWindow_KeyDown;
        }

        public string position = "#1";

        /// <summary>
        /// 2개이상 프로그램을 띄울 때, 구분을 위한 config.ini 파일 생성부
        /// </summary>
        /// <param name="url"></param>
        private void LoadINI(string url)
        {
            try
            {
                if (!System.IO.File.Exists(url))
                {
                    WritePrivateProfileString("Set Position", "#1,#2,#3,#4,#5,#6", "#1", url);
                    this.LogState(LogType.Info, "Make INI");
                }
                else
                {
                    StringBuilder temp = new StringBuilder(255);

                    GetPrivateProfileString("Set Position", "#1,#2,#3,#4,#5,#6", "", temp, 255, url);
                    position = temp.ToString();
                    //labelPos.Content = position;
                    this.LogState(LogType.Info, "Load INI");
                }
                this.LogState(LogType.Info, "Program Side - " + position);
            }
            catch (Exception ec)
            {
                this.LogState(LogType.Fail, "Load INI", ec);
            }
        }

        /// <summary>
        /// 메서드 이름으로 실제 코드에서 찾아 동작시키는 메서드.
        /// 구현된 메서드 이름이 없다면 예외발생
        /// </summary>
        /// <param name="method"></param>
        /// <param name="objArr"></param>
        /// <returns></returns>
        public bool MethodInvoker(string method, object[] objArr)
        {
            try
            {
                MethodInfo mi = this.GetType().GetMethod(method);

                var ti = objArr[0] as TestItem;

                if (isDummy)
                {
                    ti.Value_ = 0;
                    ti.Result = "PASS";
                    this.LogState(LogType.NG, "Test :" + ti.Name + " End - DUMMY (VALUE IS 0)");
                    return true;
                }

                return (bool)mi.Invoke(this, objArr);
            }
            catch (Exception ec)
            {
                if (ec is NullReferenceException)
                {
                    LogState(LogType.Fail, "MethodInvoker - Not Exist Methods (" + method+")");
                }
                else
                {
                    LogState(LogType.Fail, "MethodInvoker", ec);
                }
                
            }
            return false;
        }

        #region eollist.csv를 실제 메서드로 만들고 이벤트 걸어주는 부분

        /// <summary>
        /// eolList.csv에서 실제 검사항목으로 불러오는 부분
        /// </summary>
        private void LoadList()
        {
            try
            {
                Encoding encode = System.Text.Encoding.GetEncoding("ks_c_5601-1987");
                //var arr = File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", Encoding.Default);

                //181218 여러개 모델일 때 버튼이 새로 추가 안되는 현상 FIX
                sdic = new Dictionary<string, List<TestItem>>();
                var li = new List<TestItem>();

                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);

                StreamReader streamReader = new StreamReader(readData, encode);

                int cnt = 0;
                while (streamReader.Peek() > -1)
                {
                    if (cnt == 0)
                    {
                        var columnHeaders = streamReader.ReadLine();
                        cnt++;
                    }
                    else
                    {
                        #region item parse
                        var content = streamReader.ReadLine();

                        var ar = content.Split(',');
                        var groupContent = ar[0];

                        var groupName = ar[0].Replace(" ", "").Replace("(", "_").Replace(")", "_").Replace("-", "_").Replace("/", "").Replace("%", "");

                        var singleContent = ar[1];

                        var singleName = ar[1].Replace(" ", "").Replace("(", "_").Replace(")", "_").Replace("/", "SLASH").Replace("%", "PERCENT").Replace("+", "PLUS").Replace("-", "MINUS").Replace("#", "SHARP").Replace(".", "DOT").Replace("→", "_");

                        var clctItem = ar[2];
                        var min = ar[3];
                        var max = ar[4];
                        var unit = ar[5];
                        var isUse = ar[8];

                        if (isUse == "0")
                            continue;

                        var button = new Button();
                        button.Name = "bt_" + singleName;
                        button.Style = this.FindResource("manual_bt_s") as Style;
                        button.Width = 260;
                        button.FontSize = 12;
                        button.Content = singleContent;
                        button.Click += SingleButtonClick;


                        var ti = new TestItem();
                        ti.CLCTITEM = clctItem;
                        ti.Max = max;
                        ti.Min = min;
                        ti.Unit = unit;
                        ti.No = cnt;
                        ti.Bt = button;
                        ti.GroupName = groupName;
                        ti.Name = singleName;
                        ti.SingleMethodName = ar[6];
                        ti.GroupMethodName = ar[7];

                        if (!sdic.ContainsKey(groupContent))
                        {
                            li = new List<TestItem>();
                            li.Add(ti);

                            sdic.Add(groupContent, li);

                        }
                        else
                        {
                            sdic[groupContent].Add(ti);
                        }
                        MakeSingleMethodToTextFile(ti.SingleMethodName);

                        cnt++;
                        #endregion
                    }

                }

                modelList[selectedIndex].TestItemList.Clear();
                //181218 여러개 모델일 때 버튼이 새로 추가 안되는 현상 FIX
                btgrid.Children.Clear();
                #region Add bt in Grid
                foreach (var dicItem in sdic)
                {
                    var singleGrid = new Grid();
                    singleGrid.Margin = new Thickness(3);
                    var comboBox = new ComboBox();
                    comboBox.FlowDirection = System.Windows.FlowDirection.LeftToRight;
                    foreach (var initem in dicItem.Value)
                    {
                        comboBox.Items.Add(initem.Bt);
                        modelList[selectedIndex].TestItemList.Add(initem.Bt.Content.ToString(), initem);
                    }

                    //MakeGroupMethodToTextFile(sdic);
                    singleGrid.Children.Add(comboBox);
                    var groupButton = new Button();
                    groupButton.Content = dicItem.Key;
                    groupButton.Name = dicItem.Value[0].GroupName;
                    groupButton.Margin = new Thickness(0, 0, 30, 0);
                    groupButton.Click += GroupButtonClick;
                    groupButton.Style = this.FindResource("manual_bt_s") as Style;
                    //7.
                    //190104 grchoi
                    //20181226 wjs try~catch add(unregister->register)                    
                    try
                    {
                        this.RegisterName(groupButton.Name, groupButton);
                    }
                    catch (Exception)
                    {
                        this.UnregisterName(groupButton.Name);
                        //LogState(LogType.Fail, "UN Reregister Bt");
                        try
                        {
                            //LogState(LogType.Fail, "Reregister Bt");
                            this.RegisterName(groupButton.Name, groupButton);
                        }
                        catch (Exception)
                        {
                            //LogState(LogType.Fail, "Reregister Bt");
                        }
                    }
                    singleGrid.Children.Add(groupButton);

                    btgrid.Children.Add(singleGrid);
                }
                #endregion
                bt_save = new Button();
                bt_save.Margin = new Thickness(5);
                bt_save.Content = "Save Data";
                bt_save.Name = "bt_save";
                bt_save.Click += bt_save_Click;
                bt_save.Style = this.FindResource("manual_bt_s") as Style;
                bt_save.FontSize = 15;
                btgrid.Children.Add(bt_save);
                //<Button Margin="5" Grid.Column="2" Grid.Row="1" Content="Save Data" Name="bt_save" Click="bt_save_Click" Style="{StaticResource manual_bt_s}" FontSize="15"/>


                this.testItemListDg.ItemsSource = modelList[selectedIndex].TestItemList;
            }
            catch (Exception ec)
            {
                LogState(LogType.Fail, "LoadList", ec);
            }
        }

        /// <summary>
        /// 편의를 위해 특정 파일에 메서드를 텍스트로 만들어주는 부분
        /// </summary>
        /// <param name="dicItem"></param>
        private void MakeGroupMethodToTextFile(Dictionary<string, List<TestItem>> dicItem)
        {
            var sb = new StringBuilder();
            sb.AppendLine("//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            foreach (var methodName in dicItem)
            {
                sb.AppendLine("public bool " + methodName.Key + "(TestItem ti)");
                sb.AppendLine("{");
                sb.AppendLine("     isProcessingUI(ti);");
                sb.AppendLine("     ti.Value_ = null;");
                sb.AppendLine("     return JudgementTestItem(ti);");
                sb.AppendLine("}");
                sb.AppendLine("");
            }
            File.AppendAllText("D:\\MethodFile.txt", sb.ToString() + "\r\n", Encoding.UTF8);
        }

        /// <summary>
        /// 편의를 위해 특정 파일에 메서드를 텍스트로 만들어주는 부분
        /// </summary>
        private void MakeSingleMethodToTextFile(string methodName)
        {
            var sb = new StringBuilder();
            sb.AppendLine("public bool " + methodName + "(TestItem ti)");
            sb.AppendLine("{");
            sb.AppendLine("     isProcessingUI(ti);");
            sb.AppendLine("     ti.Value_ = null;");
            sb.AppendLine("     return JudgementTestItem(ti);");
            sb.AppendLine("}");
            sb.AppendLine("");
            File.AppendAllText("D:\\MethodFile.txt", sb.ToString() + "\r\n", Encoding.UTF8);
        }
        
        Thread GroupBtThread, SingleBtThread;

        /// <summary>
        /// 그룹버튼을 눌렀을 때, 해당 그룹이름에 맞는 모든 검사항목을 순차적으로 돌린다.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GroupButtonClick(object sender, RoutedEventArgs e)
        {
            if (GroupBtThread != null)
                return;

            isStop = ispause = false;
            string gbtName = (sender as Button).Name.ToString();
            //8.바코드리딩 단위검사 시 Lot TextBox 정보가 lot id 저장되도록 적용
            //(1.그룹버튼, 2.싱글버튼)
            //190105 by grchoi
            if (gbtName == "BarcodeReading")
            {
                modelList[selectedIndex].LotId = lotTb.Text;
            }
            GroupBtThread = new Thread(() =>
                {
                    bool isPass = true;
                    foreach (var item in modelList[selectedIndex].TestItemList)
                    {
                        if (item.Value.GroupName == gbtName)
                        {
                            var rst = MethodInvoker(item.Value.SingleMethodName, new object[] { item.Value });
                            if (!rst)
                                isPass = false;
                           
                            Thread.Sleep(10);//항목간 간격
                        }
                    }

                    SetCtrlToPass(isPass, gbtName);
                    GroupBtThread = null;
                });
            GroupBtThread.Start();
        }

        /// <summary>
        /// 단일검사시 동작하는 메서드
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SingleButtonClick(object sender, RoutedEventArgs e)
        {
            isStop = false;
            if (SingleBtThread != null)
                return;

            isStop = ispause = false;
            string sbtName= (sender as Button).Content.ToString();
            //8.바코드리딩 단위검사 시 Lot TextBox 정보가 lot id 저장되도록 적용
            //(1.그룹버튼, 2.싱글버튼)
            //190105 by grchoi
            if (sbtName == "BarcodeReading")
            {
                modelList[selectedIndex].LotId = lotTb.Text;
            }
            foreach (var item in modelList[selectedIndex].TestItemList)
            {
                if (item.Value.Bt.Content.ToString()== sbtName)
                {
                    SingleBtThread = new Thread(() =>
                        {
                            MethodInvoker(item.Value.SingleMethodName, new object[] { item.Value });

                            SingleBtThread = null;
                        });
                    SingleBtThread.Start();
                }
            }
        }
        Button bt_save;

        #endregion


        /// <summary>
        /// 전역 키다운 이벤트,
        /// 기본값은 F2가 충방전 스케줄링 로드
        /// F3은 오토스타트
        /// 가끔 안되는 펑션키가 있다(눌러도 이벤트를 안탄다)
        /// 취향에 맞게 설정~
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MainWindow_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {
                case Key.F1:
                    {
                        ContinueWindow ct = new ContinueWindow();
                        ct.maintitle.Content = "EOL INSPECTION";
                        ct.reason.Content = "ver. " + lastUpdated;
                        ct.contibt.Content = "OK";
                        ct.shockLb.Content = "※";
                        ct.Show();
                    };break;
                case Key.F2:
                    {
                        mmw.savedCb.IsChecked = false;
                        mmw.Show();
                    }; break;
                case Key.F3: { AutoMode(); }; break;
                case Key.F4:
                    {
                        var th = new Thread(() =>
                            {
                                SetCellDetailList(0);
                                SetCellDetailList(1);
                                SetCellDetailList(2);
                                SetCellDetailList(3);
                                SetCellDetailList(4);
                            });
                        th.Start();
                    }; break;
                case Key.F5:
                    {
                        var th = new Thread(() =>
                        {
                            var str = "LGCPE02POL00058580000001";


                            var d = Encoding.ASCII.GetBytes(str);
                            var df = 00;

                            var pol = Encoding.ASCII.GetBytes("POL");
                            var p = pol;

                            pol = Encoding.ASCII.GetBytes("LGC");
                            p = pol;

                            str = "706F6C";
                            var dff = GetHexToStr(str); // >> pol

                            var dd = dff;

                            });
                        th.Start();
                    }; break;
            }
        }
        
        /// <summary>
        /// 바코드를 읽었을 때 시작
        /// </summary>
        public void AutoMode()
        {
            //이미 동작중에 다시 시작이 들어온다면 리턴처리
            if (autoModeThread != null && autoModeThread.IsAlive)
                return;

            //상세수집항목 비우기
            foreach (var item in this.modelList[selectedIndex].TestItemList)
            {
                //9. AutomodeStart 시 검사항목 값 및 상세수집항목 Clear 추가
                //190106 by grchoi
                item.Value.Value_ = null;
                item.Value.refValues_.Clear();
            }

            this.Dispatcher.Invoke(new Action(() =>
            {
                Barcode = this.lotTb.Text;

                //9.AutomodeStart 시 Module BCR Monoframe(Result 로그 저장 시 사용) 변수에 저장
                //190103 by grchoi
                MonoFrame = this.monoTb.Text;
            }));

            LogState(LogType.Info, "START_TEST-------------------------------------------------------", null, false);
            

            lotTb.Text = modelList[0].LotId = Barcode;

            //검사값 비우기
            ResetClick(this, null);

            this.time_start_tb.Text = this.time_finish_tb.Text = this.time_elapsed_tb.Text = "";
            this.testPb.Value = 0;
            nowTime = DateTime.Now;
            this.time_start_tb.Text = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            elapsedtime = new DateTime();
            this.time_elapsed_tb.Text = elapsedtime.ToString("HH:mm:ss");
            isMESSkipCb.IsEnabled = manualBt.IsEnabled = false;
            
            ThreadStart tstart = new ThreadStart(this.AutoModeStart);
            autoModeThread = new Thread(tstart);
            autoModeThread.IsBackground = true;
            autoModeThread.Start();
            timetick.Start();
            this.LogState(LogType.Info, "Auto mode Started");
        }
        bool stjob = true;
        private void AutoModeStart()
        {
            //11. 전압검사기와 같이 제어항목이 없는 검사기의 경우 AutomodeStart 시 
            //수집항목 Respense가 MES로부터 없는 경우 예외처리를 위해 해당 Flag 정의 함
            //190105 by grchoi
            mesdisflag = false; //20181225 wjs add

            if (plc != null)
                plc.isSuc = false;

            isStop = false;
            double testCount = this.modelList[selectedIndex].TestItemList.Count;
            double progVal = 100.0 / testCount;
            bool isPass = true;

            //prodId = this.Barcode;//제품 ID
            //userId = "EIF";
            //procId = "P8100";//공정ID
            //eqpId = "W1PBMA101-4-4";
            this.modelList[selectedIndex].LotId = this.Barcode;// "LGC-WAH;B0011PL230001";

            this.Dispatcher.Invoke(new Action(() =>
            {
                isMESskip = isMESSkipCb.IsChecked == false ? false : true;
                this.modelList[selectedIndex].UserId = userTb.Text;
            }));

            //12. AutomodeStart 시 검사모델/설비ID/제품ID/공정ID를 로그로 남김
            LogState(LogType.Info, "Started Model : " + this.modelList[selectedIndex].ModelId);
            LogState(LogType.Info, "Lot ID : " + this.modelList[selectedIndex].LotId);
            LogState(LogType.Info, "Proc ID : " + this.modelList[selectedIndex].ProcId);
            LogState(LogType.Info, "Prod ID : " + this.modelList[selectedIndex].ProdId);
            LogState(LogType.Info, "Equip ID : " + this.modelList[selectedIndex].EquipId);

            #region 착공, 컨트롤스펙, 프로세싱 스펙
            if (!isMESskip)
            {
                if (!MES.isMESConnected)
                {
                    this.LogState(LogType.Fail, "MES_NOT_CONNECTED");
                    SaveData(); Finished(false);
                    //13.AutomodeStart 시 MES.isMESConnected 가 false 인 경우 finished 함수에서 PLC에
                    //   결과 전송을 하지 않는 예외처리를 위해 결과 전송 구문 추가
                    //190104 by grchoi
                    if (plc != null) plc.TestResult(false);

                    return;
                }

                //process control param 요청
                //var ctrlparam = MES.GetProcessControlParameterRequest(this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].ProdId, this.modelList[selectedIndex].ProcId);
                //if (ctrlparam == string.Empty)
                //{
                //    this.LogState(LogType.Fail, "MES_ProcessControlParameterRequest");
                //    SaveData(); Finished(false,false);
                //    return;
                //}
                //ControlSpecInitToMES(ctrlparam);

                ////들어온 컨트롤 스펙으로 충방전 스케줄 리프레싱
                //SetCyclerStepToMESData(0);

                //processing spec 요청
                this.Dispatcher.Invoke(new Action(() =>
                {
                    //15. AutomodeStart 시 MES Skip 모드 인경우 local spec 호출을 위한 구문추가
                    GetControlItem();
                    GetCollectItem();
                }));
                
                //착공보고
                if (MES.StartJobInsp(this.modelList[selectedIndex].LotId, this.modelList[selectedIndex].ProcId, this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].UserId) == "NG") //OK일때 시작
                {
                    //14. 착공NG 시 검사 첫 항목에서 해당 NG명 표현 및 처리 구문 추가
                    //    (stjob flag 추가 및 리셋 등 확인)
                    //180104 grchoi add wjs
                    stjob = false;
                    this.LogState(LogType.Fail, "MES_StartJobInsp");
                    SaveData(); Finished(false,false);

                    if (plc != null)
                        plc.TestResult(false);

                    return;
                }
                stjob = true;//180104 grchoi add wjs
            }
            else
            {
                //this.LogToControl();
                //this.LogToCollect(false);
                //190105 grchoi
                this.Dispatcher.Invoke(new Action(() =>
                {
                    GetControlItem();
                    GetCollectItem();
                }));
            }
            #endregion

            //16. 오토모드 시작 시 PLC 오토모드 비트 추가(bit7) ON
            //    -> 시나리오 정립후에 필요없음
            //190104 by grchoi
            if (plc != null)
            {
                if (!plc.Automode_Flag)
                {
                    plc.Automode(true);
                }
            }

            #region Tests

            ClearCellDetailList();
            ProgressRefresh(0);
            
            foreach (var single in sdic)
            {
                //그룹단위로 검사 시작.        
                foreach (var item in modelList[selectedIndex].TestItemList)
                {
                    if (item.Value.GroupName == single.Value[0].GroupName)
                    {
                        var rst = MethodInvoker(item.Value.SingleMethodName, new object[] { item.Value });
                        
                        if (!SetCtrlToPass(rst, item.Value.GroupName))
                        {
                            isPass = false;
                        }

                        Thread.Sleep(autobtwtick);
                        ProgressRefresh(progVal);
                    }
                }

                //그룹단위로 끝나고 판단
                if (!isPass)
                {
                    SaveData(); 
                    Finished(false);
                    return;
                }
            }
                    
            ProgressRefresh(100);
            #endregion

            SaveData();
            Finished(true);
            autoModeThread = null;
        }

        public void GetControlItem()
        {
            if (MES.isMESConnected && !isMESskip) GetControlItemFromMES();
            else GetControlItemFromCSV();

            //LogState(LogType.RESPONSE, "GetProcessControlParameterRequest - " + spec.Remove(spec.Length - 4, 4));
            SetCyclerStepToMESData(0);
        }

        private void GetControlItemFromMES()
        {
            //MES에 제어항목을 요청한다
            string controlItem = MES.GetProcessControlParameterRequest(this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].ProdId, this.modelList[selectedIndex].ProcId);
            if (controlItem == "")
            {
                //요청에 실패한 경우 csv에서 불러온다
                mesdisflag = true;
                GetControlItemFromCSV();
                return;
            }
            else mesdisflag = false;

            //ControlList.csv에서 항목별 ID를 가져오기 위해 Read
            //장비별로 수정필요
            string typeName = "";
            switch (localTypes)
            {
                case 0: typeName = "12S"; break;
                case 2: typeName = "8S"; break;
            }

            int i = 0;
            string columnHeaders = "";
            List<string> ctrlItems = new List<string>();
            try
            {
                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "ControlList_" + typeName + ".csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                StreamReader streamReader = new StreamReader(readData, Encoding.UTF8);

                //헤더 따로 저장
                columnHeaders = streamReader.ReadLine();

                //내용중에서 첫 열(CTRLITEM)만 가져온다
                while (streamReader.Peek() > -1) ctrlItems.Add(streamReader.ReadLine().Split(',')[0]);

                streamReader.Dispose();
                readData.Dispose();
            }
            catch (Exception ex) { LogState(LogType.Fail, "GetControlItemFromMES", ex); }

            try
            {
                //받은 데이터를 파싱한다
                string[] parsed = controlItem.Split('@');
                var str = parsed[0].Split(new string[] { "CTRLITEM" }, StringSplitOptions.RemoveEmptyEntries);
                parsed[0] = "CTRLITEM" + str[1];
                parsed[parsed.Length - 1] = parsed[parsed.Length - 1].Remove(parsed[parsed.Length - 1].Length - 4, 4);

                foreach (string item in parsed)
                {
                    string[] splitter = new string[] { "^", "=" };
                    var arr = item.Split(splitter, StringSplitOptions.RemoveEmptyEntries);

                    //제어항목ID가 가져왔던 List에 존재하는지 확인한다
                    if (ctrlItems.Contains(arr[1]))
                    {
                        //존재한다면 ID와 Value를 저장한다
                        string ctrlItem = arr[1];

                        //값을 모델변수에 집어넣는다
                        //장비별로 수정필요
                        /*if (localTypes == 0) //12s
                        {
                            switch (ctrlItem)
                            {
                                case "W2M3MTC4201": modelList[selectedIndex].plusirlevelTb = value; break;
                                case "W2M3MTC4202": modelList[selectedIndex].plusirtimeTb = value; break;
                                case "W2M3MTC4203": modelList[selectedIndex].pluswithvoltageTb = value; break;
                                case "W2M3MTC4204": modelList[selectedIndex].pluswithtimeTb = value; break;
                                case "W2M3MTC4205": modelList[selectedIndex].pluswithramptimeTb = value; break;
                                case "W2M3MTC4206": modelList[selectedIndex].pluswithfalldntimeTb = value; break;
                                case "W2M3MTC4207": modelList[selectedIndex].arconTb = value; break;
                                case "W2M3MTC4208": modelList[selectedIndex].arclimitTb = value; break;
                            }
                        }
                        else if (localTypes == 2) //8s
                        {*/
                        switch (ctrlItem)
                        {
                            case "W2M3MTC4401": befDiscRestTime = arr[3]; break;
                            case "W2M3MTC4402": discCur = arr[3]; break;
                            case "W2M3MTC4403": discTime = arr[3]; break;
                            case "W2M3MTC4404": discCurLimit = arr[3]; break;
                            case "W2M3MTC4405": aftDiscRestTime = arr[3]; break;
                            case "W2M3MTC4406": charCur = arr[3]; break;
                            case "W2M3MTC4407": charTime = arr[3]; break;
                            case "W2M3MTC4408": charCurLimit = arr[3]; break;
                            case "W2M3MTC4409": aftCharRestTime = arr[3]; break;
                            case "W2M3MTC4410": safeVoltHighLimit = arr[3]; break;
                            case "W2M3MTC4411": safeVoltLowLimit = arr[3]; break;
                            case "W2M3MTC4412": cellFomula1 = double.Parse(arr[3]); break;
                            case "W2M3MTC4413": cellFomula2 = double.Parse(arr[3]); break;
                            case "W2M3MTC4414": moduleFomula1 = double.Parse(arr[3]); break;
                            case "W2M3MTC4415": moduleFomula2 = double.Parse(arr[3]); break;
                        }
                        //}
                    }
                    else LogState(LogType.Fail, "Received ControlList ID is Unknown.");
                }
            }
            catch (Exception ex) { LogState(LogType.Fail, "GetControlItemFromMES", ex); }

            LogState(LogType.RESPONSE, "GetProcessControlParameterRequest - " + controlItem);//wjs
            LogState(LogType.RESPONSE, "GetProcessControlParameterRequest - " + controlItem.Remove(controlItem.Length - 4, 4));

            //MES로부터 받아온 제어항목을 CSV에 저장한다.
            SetControlItemToCSV();
        }

        private void GetControlItemFromCSV()
        {
            try
            {
                LogState(LogType.MANUALCONDITION, "Use To Local Data(Control)");

                //ControlList.csv에서 항목별 ID를 가져온다
                //장비별로 수정필요
                string typeName = "";
                switch (localTypes)
                {
                    case 0: typeName = "12s"; break;
                    case 2: typeName = "8s"; break;
                }
                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "ControlList_" + typeName + ".csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                StreamReader streamReader = new StreamReader(readData, Encoding.UTF8);

                //헤더 따로 저장
                string[] columnHeaders = streamReader.ReadLine().Split(',');

                //파일에서 ID와 값을 가져온다
                List<string> ctrlItems = new List<string>();
                while (streamReader.Peek() > -1)
                {
                    string[] arr = streamReader.ReadLine().Split(',');
                    string ctrlItem = arr[0];

                    //값을 모델변수에 집어넣는다
                    //장비별로 수정필요
                    /*if (localTypes == 0) //12s
                    {
                        switch (ctrlItem)
                        {
                            case "W2M3MTC4201": modelList[selectedIndex].plusirlevelTb = value; break;
                            case "W2M3MTC4202": modelList[selectedIndex].plusirtimeTb = value; break;
                            case "W2M3MTC4203": modelList[selectedIndex].pluswithvoltageTb = value; break;
                            case "W2M3MTC4204": modelList[selectedIndex].pluswithtimeTb = value; break;
                            case "W2M3MTC4205": modelList[selectedIndex].pluswithramptimeTb = value; break;
                            case "W2M3MTC4206": modelList[selectedIndex].pluswithfalldntimeTb = value; break;
                            case "W2M3MTC4207": modelList[selectedIndex].arconTb = value; break;
                            case "W2M3MTC4208": modelList[selectedIndex].arclimitTb = value; break;
                        }
                    }
                    else if (localTypes == 2) //8s
                    {*/
                    switch (ctrlItem)
                    {
                        case "W2M3MTC4401": befDiscRestTime = arr[1]; break;
                        case "W2M3MTC4402": discCur = arr[1]; break;
                        case "W2M3MTC4403": discTime = arr[1]; break;
                        case "W2M3MTC4404": discCurLimit = arr[1]; break;
                        case "W2M3MTC4405": aftDiscRestTime = arr[1]; break;
                        case "W2M3MTC4406": charCur = arr[1]; break;
                        case "W2M3MTC4407": charTime = arr[1]; break;
                        case "W2M3MTC4408": charCurLimit = arr[1]; break;
                        case "W2M3MTC4409": aftCharRestTime = arr[1]; break;
                        case "W2M3MTC4410": safeVoltHighLimit = arr[1]; break;
                        case "W2M3MTC4411": safeVoltLowLimit = arr[1]; break;
                        case "W2M3MTC4412": cellFomula1 = double.Parse(arr[1]); break;
                        case "W2M3MTC4413": cellFomula2 = double.Parse(arr[1]); break;
                        case "W2M3MTC4414": moduleFomula1 = double.Parse(arr[1]); break;
                        case "W2M3MTC4415": moduleFomula2 = double.Parse(arr[1]); break;
                    }
                    //}
                }
            }
            catch (Exception ex) { LogState(LogType.Fail, "GetControlItemFromCSV", ex); }

            string control = "";
            /*if (localTypes == 0) //12s
            {
                control = "ACK=OK,ERRMSG=,"
                        + "CTRLITEM=W2M3MTC4201^CTRLVAL=" + modelList[selectedIndex].plusirlevelTb.ToString()
                        + "@CTRLITEM=W2M3MTC4202^CTRLVAL=" + modelList[selectedIndex].plusirtimeTb.ToString()
                        + "@CTRLITEM=W2M3MTC4203^CTRLVAL=" + modelList[selectedIndex].pluswithvoltageTb.ToString()
                        + "@CTRLITEM=W2M3MTC4204^CTRLVAL=" + modelList[selectedIndex].pluswithtimeTb.ToString()
                        + "@CTRLITEM=W2M3MTC4205^CTRLVAL=" + modelList[selectedIndex].pluswithramptimeTb.ToString()
                        + "@CTRLITEM=W2M3MTC4206^CTRLVAL=" + modelList[selectedIndex].arconTb.ToString()
                        + "@CTRLITEM=W2M3MTC4207^CTRLVAL=" + modelList[selectedIndex].arclimitTb.ToString();
            }
            else if (localTypes == 2) //8s
            {*/
            control = "ACK=OK,ERRMSG=,"
                    + "CTRLITEM=W2M3MTC4401^CTRLVAL=" + befDiscRestTime
                    + "@CTRLITEM=W2M3MTC4402^CTRLVAL=" + discCur
                    + "@CTRLITEM=W2M3MTC4403^CTRLVAL=" + discTime
                    + "@CTRLITEM=W2M3MTC4404^CTRLVAL=" + discCurLimit
                    + "@CTRLITEM=W2M3MTC4405^CTRLVAL=" + aftDiscRestTime
                    + "@CTRLITEM=W2M3MTC4406^CTRLVAL=" + charCur
                    + "@CTRLITEM=W2M3MTC4407^CTRLVAL=" + charTime
                    + "@CTRLITEM=W2M3MTC4408^CTRLVAL=" + charCurLimit
                    + "@CTRLITEM=W2M3MTC4409^CTRLVAL=" + aftCharRestTime
                    + "@CTRLITEM=W2M3MTC4410^CTRLVAL=" + safeVoltHighLimit
                    + "@CTRLITEM=W2M3MTC4411^CTRLVAL=" + safeVoltLowLimit
                    + "@CTRLITEM=W2M3MTC4412^CTRLVAL=" + cellFomula1
                    + "@CTRLITEM=W2M3MTC4413^CTRLVAL=" + cellFomula2
                    + "@CTRLITEM=W2M3MTC4414^CTRLVAL=" + moduleFomula1
                    + "@CTRLITEM=W2M3MTC4415^CTRLVAL=" + moduleFomula2;
            //}
            //미사용, 메뉴얼 스펙으로 들어왔을 때 해당 메서드를 탄다.
            this.LogState(LogType.MANUALCONDITION, "GetProcessControlParameterRequest - " + control);
        }

        public void SetControlItemToCSV()
        {
            string columnHeaders = "";
            List<string> ctrlItems = new List<string>();
            StringBuilder sb = new StringBuilder();

            string typeName = "";
            //장비별로 수정필요
            switch (localTypes)
            {
                case 0: typeName = "12s"; break;
                case 2: typeName = "8s"; break;
            }

            try
            {
                //ControlList.csv를 불러온다

                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "ControlList_" + typeName + ".csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                StreamReader sr = new StreamReader(readData, Encoding.UTF8);

                //헤더 따로 저장
                columnHeaders = sr.ReadLine();

                //제어항목을 불러온다
                while (sr.Peek() > -1)
                {
                    string[] arr = sr.ReadLine().Split(',');

                    //제어항목의 값을 현재 모델의 값으로 저장한다
                    //장비별로 수정필요
                    string value = "";

                    /*if (localTypes == 0) //12s
                    {
                        switch (arr[0])
                        {
                            case "W2M3MTC4201": value = modelList[selectedIndex].plusirlevelTb.ToString(); break;
                            case "W2M3MTC4202": value = modelList[selectedIndex].plusirtimeTb.ToString(); break;
                            case "W2M3MTC4203": value = modelList[selectedIndex].pluswithvoltageTb.ToString(); break;
                            case "W2M3MTC4204": value = modelList[selectedIndex].pluswithtimeTb.ToString(); break;
                            case "W2M3MTC4205": value = modelList[selectedIndex].pluswithramptimeTb.ToString(); break;
                            case "W2M3MTC4206": value = modelList[selectedIndex].pluswithfalldntimeTb.ToString(); break;
                            case "W2M3MTC4207": value = modelList[selectedIndex].arconTb.ToString(); break;
                            case "W2M3MTC4208": value = modelList[selectedIndex].arclimitTb.ToString(); break;
                        }
                    }
                    else if (localTypes == 2) //8s
                    {*/
                    switch (arr[0])
                    {
                        case "W2M3MTC4401": value = befDiscRestTime; break;
                        case "W2M3MTC4402": value = discCur; break;
                        case "W2M3MTC4403": value = discTime; break;
                        case "W2M3MTC4404": value = discCurLimit; break;
                        case "W2M3MTC4405": value = aftDiscRestTime; break;
                        case "W2M3MTC4406": value = charCur; break;
                        case "W2M3MTC4407": value = charTime; break;
                        case "W2M3MTC4408": value = charCurLimit; break;
                        case "W2M3MTC4409": value = aftCharRestTime; break;
                        case "W2M3MTC4410": value = safeVoltHighLimit; break;
                        case "W2M3MTC4411": value = safeVoltLowLimit; break;
                        case "W2M3MTC4412": value = cellFomula1.ToString(); break;
                        case "W2M3MTC4413": value = cellFomula2.ToString(); break;
                        case "W2M3MTC4414": value = moduleFomula1.ToString(); break;
                        case "W2M3MTC4415": value = moduleFomula2.ToString(); break;
                    }
                    //}

                    if (value != "") sb.Append(arr[0] + "," + value + "," + arr[2] + "," + arr[3] + "\n");
                }

                //저장된 제어항목을 파일에 저장
                StreamWriter sw = new StreamWriter(AppDomain.CurrentDomain.BaseDirectory + "ControlList_" + typeName + ".csv", false);

                sw.WriteLine(columnHeaders);
                sw.Write(sb.ToString());

                sw.Dispose();
                sr.Dispose();
                readData.Dispose();

                Thread.Sleep(1000);
            }
            catch (Exception ex) { LogState(LogType.Fail, "SetControlItemToCSV", ex); }
        }

        public void GetCollectItem()
        {
            sdic = new Dictionary<string, List<TestItem>>();
            var testItems = new List<TestItem>();

            FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            StreamReader streamReader = new StreamReader(readData, Encoding.UTF8);

            try
            {
                int cnt = 1;
                var columnHeaders = streamReader.ReadLine();
                while (streamReader.Peek() > -1)
                {
                    #region item parse
                    var content = streamReader.ReadLine();
                    var ar = content.Split(',');

                    switch (localTypes)
                    {
                        //case -1: if (ar[10] == "0") continue; break;
                        case 0: if (ar[8] == "0") continue; break;
                        case 2: if (ar[7] == "0") continue; break;
                            //case 2: if (ar[9] == "0") continue; break;
                    }

                    var groupContent = ar[0];
                    var groupName = ar[0].Replace(" ", "").Replace("(", "_").Replace(")", "_").Replace("-", "_").Replace("/", "").Replace("%", "");

                    var singleContent = ar[1];
                    var singleName = ar[1].Replace(" ", "").Replace("(", "_").Replace(")", "_").Replace("/", "SLASH").Replace("%", "PERCENT").Replace("+", "PLUS").Replace("-", "MINUS").Replace("#", "SHARP").Replace(".", "DOT").Replace("→", "_");

                    var clctItem = ar[2];
                    var min = ar[3];
                    var max = ar[4];
                    var unit = ar[5];

                    var button = new Button();
                    button.Name = "bt_" + singleName;
                    button.Style = this.FindResource("manual_bt_s") as Style;
                    button.Width = 260;
                    button.FontSize = 12;
                    button.Content = singleContent;
                    button.Click += SingleButtonClick;

                    var ti = new TestItem();
                    ti.CLCTITEM = clctItem;
                    ti.Max = max;
                    ti.Min = min;
                    ti.Unit = unit;
                    ti.No = cnt;
                    ti.Bt = button;
                    ti.GroupName = groupName;
                    ti.Name = singleName;
                    ti.SingleMethodName = ar[6];

                    if (!sdic.ContainsKey(groupContent))
                    {
                        testItems = new List<TestItem>();
                        testItems.Add(ti);

                        sdic.Add(groupContent, testItems);
                    }
                    else
                    {
                        sdic[groupContent].Add(ti);
                    }
                    //MakeSingleMethodToTextFile(ti.SingleMethodName);

                    cnt++;
                    #endregion
                }

                modelList[selectedIndex].TestItemList.Clear();
                btgrid.Children.Clear();
                #region Add bt in Grid
                foreach (var dicItem in sdic)
                {
                    var singleGrid = new Grid();
                    singleGrid.Margin = new Thickness(3);
                    var comboBox = new ComboBox();
                    comboBox.FlowDirection = System.Windows.FlowDirection.LeftToRight;
                    foreach (var initem in dicItem.Value)
                    {
                        comboBox.Items.Add(initem.Bt);
                        modelList[selectedIndex].TestItemList.Add(initem.Bt.Content.ToString(), initem);
                    }

                    //MakeGroupMethodToTextFile(sdic);
                    singleGrid.Children.Add(comboBox);
                    var groupButton = new Button();
                    groupButton.Content = dicItem.Key;
                    groupButton.Name = dicItem.Value[0].GroupName;
                    groupButton.Margin = new Thickness(0, 0, 30, 0);
                    groupButton.Click += GroupButtonClick;
                    groupButton.Style = this.FindResource("manual_bt_s") as Style;
                    try
                    {
                        this.RegisterName(groupButton.Name, groupButton);
                    }
                    catch (Exception)
                    {
                        //190106 by grchoi
                        this.UnregisterName(groupButton.Name);
                        //LogState(LogType.Fail, "UN Reregister Bt");
                        try
                        {
                            //LogState(LogType.Fail, "Reregister Bt");
                            this.RegisterName(groupButton.Name, groupButton);
                        }
                        catch (Exception)
                        {
                            //LogState(LogType.Fail, "Reregister Bt");
                        }
                    }

                    singleGrid.Children.Add(groupButton);
                    btgrid.Children.Add(singleGrid);
                }
                #endregion
                bt_save = new Button();
                bt_save.Margin = new Thickness(5);
                bt_save.Content = "Save Data";
                bt_save.Name = "bt_save";
                bt_save.Click += bt_save_Click;
                bt_save.Style = this.FindResource("manual_bt_s") as Style;
                bt_save.FontSize = 15;
                btgrid.Children.Add(bt_save);
                //<Button Margin="5" Grid.Column="2" Grid.Row="1" Content="Save Data" Name="bt_save" Click="bt_save_Click" Style="{StaticResource manual_bt_s}" FontSize="15"/>

                this.testItemListDg.ItemsSource = modelList[selectedIndex].TestItemList;
                //190106 by grchoi
                this.testItemListDg.Items.Refresh();
            }
            catch (Exception ec)
            {
                LogState(LogType.Fail, "LoadList", ec);
            }

            if (btgrid.Children.Count < 8)
            {
                btgrid.Rows = 1;
                btgridHeight.Height = new GridLength(60);
            }

            if (MES.isMESConnected && !isMESskip) GetCollectItemFromMES();
            else GetCollectItemFromCSV();
        }

        private void GetCollectItemFromCSV()
        {
            try
            {
                LogState(LogType.MANUALCONDITION, "Use To Local Data(Collect)");

                //eollist.csv에서 항목별 ID를 가져온다
                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                StreamReader streamReader = new StreamReader(readData, Encoding.UTF8);

                //헤더 따로 저장
                string[] columnHeaders = streamReader.ReadLine().Split(',');

                //파일에서 ID와 값을 가져온다
                List<TestItem> tis = new List<TestItem>();
                while (streamReader.Peek() > -1)
                {
                    string[] arr = streamReader.ReadLine().Split(',');
                    if (arr.Length < 6) continue;
                    if ((localTypes == 0 && arr[8] != "1") || (localTypes == 2 && arr[7] != "1")) continue;
                    //if (arr[7 + localTypes] != "1") continue;

                    string clctItem = arr[1];
                    double min = 0.0, max = 0.0;
                    bool dTrigger1 = double.TryParse(arr[3], out min);
                    bool dTrigger2 = double.TryParse(arr[4], out max);

                    foreach (var testItem in modelList[selectedIndex].TestItemList)
                    {
                        if (testItem.Value.CLCTITEM == clctItem)
                        {
                            if (dTrigger1) testItem.Value.Min = min;
                            else testItem.Value.Min = arr[3];

                            if (dTrigger2) testItem.Value.Max = max;
                            else testItem.Value.Max = arr[4];

                            break;
                        }
                    }
                }
            }
            catch (Exception ex) { LogState(LogType.Fail, "GetCollectItemFromCSV", ex); }

            StringBuilder sb = new StringBuilder();
            foreach (var item in modelList[selectedIndex].TestItemList)
            {
                if (item.Key == _BARCODE)
                    continue;

                //CLCITEM=CTQW2201,CLCTLSL=9.532,CLCTUSL=12.25@
                sb.Append("ACK=OK,ERRMSG=,CLCITEM=");
                sb.Append(item.Value.CLCTITEM.ToString());
                sb.Append("^CLCTLSL=");
                sb.Append(item.Value.Min.ToString());
                sb.Append("^CLCTUSL=");
                sb.Append(item.Value.Max.ToString());
                sb.Append("@");
            }
            this.LogState(LogType.MANUALCONDITION, "GetProcessingSpecRequest - " + sb.ToString());
        }

        private void GetCollectItemFromMES()
        {
            //MES에 수집항목을 요청한다
            string collectItem = MES.GetProcessingSpecRequest(this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].ProdId, this.modelList[selectedIndex].ProcId);
            if (collectItem == "")
            {
                //요청에 실패한 경우 csv에서 불러온다
                mesdisflag = true;
                GetCollectItemFromCSV();
                return;
            }
            else mesdisflag = false;

            collectItem = collectItem.Remove(collectItem.Length - 1, 1);

            //eolList.csv에서 항목별 ID를 가져오기 위해 Read
            string columnHeaders = "";
            List<string> clctItems = new List<string>();
            try
            {
                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                StreamReader streamReader = new StreamReader(readData, Encoding.UTF8);

                //헤더 따로 저장
                columnHeaders = streamReader.ReadLine();

                //내용중에서 8,9,10 열을 참조해서 세번째 열(clctitem)을 가져온다
                while (streamReader.Peek() > -1)
                {
                    string[] arr = streamReader.ReadLine().Split(',');
                    if (localTypes == 0) //12s
                    {
                        if (arr[8] == "1" && arr[2] != "") clctItems.Add(arr[2]);
                    }
                    else if (localTypes == 2) //8s
                    {
                        if (arr[7] == "1" && arr[2] != "") clctItems.Add(arr[2]);
                    }
                }

                streamReader.Dispose();
                readData.Dispose();
            }
            catch (Exception ex) { LogState(LogType.Fail, "GetCollectItemFromMES", ex); }

            try
            {
                //받은 데이터를 파싱한다
                string[] parsed = collectItem.Split('@');
                var str = parsed[0].Split(new string[] { "CLCITEM" }, StringSplitOptions.RemoveEmptyEntries);
                parsed[0] = "CLCITEM" + str[1];
                parsed[parsed.Length - 1] = parsed[parsed.Length - 1].Remove(parsed[parsed.Length - 1].Length - 3, 3);

                foreach (string item in parsed)
                {
                    string[] splitter = new string[] { "^", "=" };
                    var arr = item.Split(splitter, StringSplitOptions.RemoveEmptyEntries);

                    if (arr.Length < 6) continue;

                    if (clctItems.Contains(arr[1]))
                    {
                        string clctItem = arr[1];
                        double min = 0.0, max = 0.0;
                        bool dTrigger1 = double.TryParse(arr[3], out min);
                        bool dTrigger2 = double.TryParse(arr[5], out max);

                        foreach (var testItem in modelList[selectedIndex].TestItemList)
                        {
                            if (testItem.Value.CLCTITEM == clctItem)
                            {
                                if (dTrigger1) testItem.Value.Min = min;
                                else testItem.Value.Min = arr[3];

                                if (dTrigger2) testItem.Value.Max = max;
                                else testItem.Value.Max = arr[5];

                                break;
                            }
                        }
                    }
                    else LogState(LogType.Fail, "Received ControlList ID is Unknown.");
                }
            }
            catch (Exception ex) { LogState(LogType.Fail, "GetCollectItemFromMES", ex); }

            LogState(LogType.RESPONSE, "GetProcessingSpecRequest - " + collectItem);
            LogState(LogType.RESPONSE, "GetProcessingSpecRequest - " + collectItem.Remove(collectItem.Length - 1, 1));

            //MES로부터 받아온 제어항목을 CSV에 저장한다.
            SetCollectItemToCSV();
        }

        public void SetCollectItemToCSV()
        {
            string columnHeaders = "";
            List<string[]> collections = new List<string[]>();
            try
            {
                //eollist.csv를 불러온다
                FileStream readData = new FileStream(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                StreamReader sr = new StreamReader(readData, Encoding.UTF8);

                //헤더 따로 저장
                columnHeaders = sr.ReadLine();

                //제어항목을 불러온다
                while (sr.Peek() > -1)
                    collections.Add(sr.ReadLine().Split(','));

                sr.Dispose();
                readData.Dispose();
            }
            catch (Exception ex) { LogState(LogType.Fail, "SetCollectItemToCSV", ex); }

            try
            {
                //저장된 제어항목을 파일에 저장
                StreamWriter sw = new StreamWriter(AppDomain.CurrentDomain.BaseDirectory + "eollist.csv", false);
                StringBuilder sb = new StringBuilder();

                //헤더를 파일에 쓴다
                sw.WriteLine(columnHeaders);

                //localTypes를 참조하여 현재 수집항목 조건을 파일에 쓴다
                for (int i = 0; i < collections.Count; i++)
                {
                    foreach (var testItem in modelList[selectedIndex].TestItemList)
                    {
                        if ((localTypes == 0 && collections[i][8] == "1" && collections[i][2] == testItem.Value.CLCTITEM)
                            || (localTypes == 2 && collections[i][7] == "1" && collections[i][2] == testItem.Value.CLCTITEM))
                        {
                            collections[i][3] = testItem.Value.Min.ToString();
                            collections[i][4] = testItem.Value.Max.ToString();
                            break;
                        }
                    }
                    foreach (string s in collections[i]) sb.Append(s + ',');
                    sb.Remove(sb.Length - 1, 1);
                    sb.Append("\n");
                }
                sb.Remove(sb.Length - 1, 1);
                sw.Write(sb.ToString());

                sb.Clear();
                sw.Dispose();

                Thread.Sleep(1000);
            }
            catch (Exception ex) { LogState(LogType.Fail, "SetCollectItemToCSV", ex); }
        }
        /// <summary>
        /// 17. MES Connect 시 MES 연결후에 isMESskip=true 후 발생하는 이벤트가 수집항목 및 제어항목
        /// 파싱 전 발생되지 않아(isMESSkipCb.isChecked = true가 늦게 적용됨) 데이터 파싱 에러야기
        /// 하여 강제 체크구문 적용
        /// </summary>
        private void MESConnect()
        {
            MES = new CMES(this);
            var rtv = MES.StartConnect();
            if (rtv == "" && MES.isMESConnected)
            {
                this.LogState(LogType.Success, "MES Connected");
                isMESskip = false;
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    isMESSkipCb.IsChecked = false;
                }));
            }
            else
            {
                isMESskip = true;
                //190106 by grchoi
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    isMESSkipCb.IsChecked = true;
                    GetCollectItem();
                    GetControlItem();
                }));
                //this.LogState(LogType.Fail, "MES Connect : "+rtv);
            }
        }
        
        /// <summary>
        /// 검사종류가 여러개일 때 새로고침 되는 부분
        /// </summary>
        public void RefreshToFlags()
        {
            this.testItemListDg.ItemsSource = modelList[selectedIndex].TestItemList;


            this.prodTb.Text = this.modelList[selectedIndex].ProdId;//제품 ID
            this.procTb.Text = this.modelList[selectedIndex].ProcId;//공정ID
            Barcode = this.lotTb.Text = this.modelList[selectedIndex].LotId;// "J9D3-10B759-AB1-170118000001";//" "LGC-WAH;B0011PL230001";
            this.userTb.Text = this.modelList[selectedIndex].UserId;
            
        }

        /// <summary>
        /// 파라미터로 Test Item을 만든다.
        /// </summary>
        /// <param name="clctitem">보고용 수집항목 ID</param>
        /// <param name="name">검사 항목 이름</param>
        /// <param name="bt">검사대상 버튼(UI)</param>
        /// <param name="min">검사하한</param>
        /// <param name="max">검사상한</param>
        /// <param name="unit">UI에 표시되는 단위</param>
        /// <returns></returns>
        private TestItem MakeTestItem(string clctitem, string name, Button bt, double min, double max, string unit = "")//,DHandler dhandler)
        {
            var no = 0;
            if (modelList[selectedIndex].TestItemList.ContainsKey(name))
            {
                var p = modelList[selectedIndex].TestItemList[name];
                p.Max = max;
                p.Min = min;
                p.Name = name;
                p.No = p.No;
                p.Bt = bt;
                p.CLCTITEM = clctitem;
                p.Unit = unit;
                return p;
            }
            return new TestItem()
            {
                CLCTITEM = clctitem,
                No = no,
                Name = name,
                Min = min,
                Max = max,
                Bt = bt,
                Unit = unit
                //delegate1 = dhandler
            };
        }

        #region Events

        void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (MessageBoxResult.OK == MessageBox.Show("Are you sure you want to Quit?", "Warning", MessageBoxButton.OKCancel, MessageBoxImage.Information)) { }
            else { e.Cancel = true; }
        }

        /// <summary>
        /// 18. MES Skip 및 Unskip시 해당 로그 추가 및 Module BCR Text Box 추가에 따라 색상변경 추가
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MES스킵함(object sender, RoutedEventArgs e)
        {
            this.monoTb.Background = this.lotTb.Background = this.prodTb.Background = this.procTb.Background = Brushes.Red;
            isMESskip = true;
            LogState(LogType.Info, "MES Skip");
            if (relays == null)
                return;

            relays.RelayOff("IDO_3");
        }

        private void MES스킵안함(object sender, RoutedEventArgs e)
        {
            if (MES.isMESConnected)
            {
                this.monoTb.Background = this.lotTb.Background = this.prodTb.Background = this.procTb.Background = Brushes.SkyBlue;
                isMESskip = false;
                LogState(LogType.Info, "MES Unskip");
                relays.RelayOn("IDO_3");
                Dispatcher.Invoke(new Action(() =>
                {
                    GetCollectItem();
                    GetControlItem();
                }));
            }
            else
            {
                isMESSkipCb.IsChecked = true;
                e.Handled = true;
                relays.RelayOff("IDO_3");
                LogState(LogType.Fail, "Not Connected to MES");
            }
        }

        bool isSkipNG_ = false;

        void ti_Tick(object sender, EventArgs e)
        {
            elapsedtime = elapsedtime.AddMilliseconds(100);
            time_elapsed_tb.Text = elapsedtime.ToString("HH:mm:ss:f");
        }
        private void NGSkip(object sender, RoutedEventArgs e)
        {
            var rp = new RequirePasswordWindow(this);
            rp.ShowDialog();
            if (rp.isOK)
            {
                isSkipNG.IsChecked = true;
                e.Handled = true;
                isSkipNG_ = true;
                LogState(LogType.Info, "NG Skip");
            }
            else
            {
                isSkipNG.IsChecked = false;
                e.Handled = true;
                isSkipNG_ = false;

                MessageBox.Show("Not Matched Password", "Info", MessageBoxButton.OK, MessageBoxImage.Stop);

            }
            rp.Close();
        }

        /// <summary>
        /// NG Skip 끌때 MES로부터 스펙을 받아온다.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NGSkipUnchecked(object sender, RoutedEventArgs e)
        {
            isSkipNG.IsChecked = false;
            e.Handled = true;
            isSkipNG_ = false;
            LogState(LogType.Info, "NG Unkip");
            //processing spec 요청
            //LogToCollect(SpecInitToMES());
            //process control param 요청
            //var ctrlparam = MES.GetProcessControlParameterRequest(this.modelList[selectedIndex].EquipId, this.modelList[selectedIndex].ProdId, this.modelList[selectedIndex].ProcId);
            //if (ctrlparam != string.Empty)
            //{
            //    ControlSpecInitToMES(ctrlparam);
            //}
            //else
            //{
            //    LogToControl();
            //}
            Dispatcher.Invoke(new Action(() =>
            {
                GetCollectItem();
                GetControlItem();
            }));

        }


        public DetailItems MakeDetailItem(string key, string data = "")
        {
            var dti = new DetailItems() { Key = key };
            dti.Reportitems.Add(data);
            return dti;
        }

        public bool isCLOSED = false;

        void MainWindow_Closed(object sender, EventArgs e)
        {
            isCLOSED = true;

            try
            {
                


                this.LogState(LogType.Success, "User Closed");
            }
            catch (Exception ec)
            {
                this.LogState(LogType.Fail, "User Closed", ec);
            }

            Thread.Sleep(500);
            System.Environment.Exit(0);
        }


        bool isAutoScr = true;
        private void autoscrChecked(object sender, RoutedEventArgs e)
        {
            isAutoScr = true;
        }

        private void autoscrUnchecked(object sender, RoutedEventArgs e)
        {
            isAutoScr = false;
        }

        private void bt_save_Click(object sender, RoutedEventArgs e)
        {
            //20. Save Data 클릭 이벤트 발생 시 Module BCR text 저장
            //190104 by grchoi
            MonoFrame = monoTb.Text.ToString();
            SaveData();
        }

        private void ProgressRefresh(double progVal)
        {

            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                if (progVal == 0)
                    this.testPb.Value = 0;
                else if (progVal == 100)
                    this.testPb.Value = 100;
                else
                    this.testPb.Value += progVal;
            }));

            if (ispause)
            {
                LogState(LogType.Info, "Pause");
            }

            bool isg = false;
            while (ispause)
            {
                isg = true;
            }
            if (isg)
            {
                LogState(LogType.Info, "Resume");
            }

        }

        private void ResetClick(object sender, RoutedEventArgs e)
        {
            //21. 리셋클릭 이벤트 시 각 플래그 초기화 / 수집,상세수집 등 초기화
            //190105 by grchoi
            stjob = true;
            isStop = ispause = false;
            bt_pass.Content = "-";
            bt_pass.Background = Brushes.DarkGray;
            ProgressRefresh(0);
            this.time_start_tb.Text = this.time_finish_tb.Text = this.time_elapsed_tb.Text = "";
            this.bmsList.Clear();//ksw
            bt_save.Background = resetBt.Background;

            foreach (var item in btgrid.Children)
            {
                if (item is Grid)
                {
                    var chitem = (item as Grid).Children;
                    foreach (var item1 in chitem)
                    {
                        if (item1 is Button)
                        {
                            var it = item1 as Button;
                            it.Background = resetBt.Background;
                        }

                        if (item1 is ComboBox)
                        {
                            var ot = item1 as ComboBox;
                            foreach (var ott in ot.Items)
                            {
                                var it = ott as Button;
                                it.Background = resetBt.Background;
                            }
                        }
                    }
                }
            }


            foreach (var item in modelList[selectedIndex].TestItemList)
            {
                item.Value.Value_ = null;
                item.Value.Result = "";
                item.Value.refValues_.Clear();
            }

            ClearCellDetailList();

        }

        private void InspectionSpecClick(object sender, RoutedEventArgs e)
        {
            var rp = new RequirePasswordWindow(this);
            rp.ShowDialog();
            if (rp.isOK)
            {
                var ins = new InspectionSpecWindow(this);
                ins.Show();
            }
            else
            {
                MessageBox.Show("Not Matched Password", "Info", MessageBoxButton.OK, MessageBoxImage.Stop);
            }
            rp.Close();

        }

        //기본 오토상태
        private void manualBt_Click(object sender, RoutedEventArgs e)
        {
            var rp = new RequirePasswordWindow(this);
            rp.ShowDialog();
            if (rp.isOK)
            {
                bt_pass.Background = Brushes.DarkGray;
                bt_pass.Content = "-";
                isManual = !isManual;
                ResetClick(this, null);

                isMESskip = isMESSkipCb.IsChecked == false ? false : true;

                if (isManual)
                {
                    //isSkipNG.IsEnabled = true;
                    labelA.Background = Brushes.Gray;
                    labelM.Background = Brushes.SkyBlue;

                    relayConBt.IsEnabled = dtcClearBt.IsEnabled = resetBt.IsEnabled = cyclerBt.IsEnabled = specBt.IsEnabled = true;
                    blinder.Visibility = Visibility.Collapsed;

                    isMESSkipCb.IsChecked = true;
                    LogState(LogType.Info, "---Switched to Manual mode---");
                }
                else
                {
                    //isSkipNG.IsChecked = isSkipNG_ = false;
                    //isSkipNG.IsEnabled = false;
                    labelA.Background = Brushes.SkyBlue;
                    labelM.Background = Brushes.Gray;
                    relayConBt.IsEnabled = dtcClearBt.IsEnabled = resetBt.IsEnabled = cyclerBt.IsEnabled = specBt.IsEnabled = false;
                    blinder.Visibility = Visibility.Visible;

                    isMESSkipCb.IsChecked = false;
                    LogState(LogType.Info, "---Switched to Auto mode---");
                }
            }
            else
            {
                if (!rp.isESC)
                {

                    MessageBox.Show("Not Matched Password", "Info", MessageBoxButton.OK, MessageBoxImage.Stop);
                }
            }

            relays.RelayOff("IDO_2");
            relays.RelayOn("IDO_1");
            rp.Close();
        }

        private void SaveData()
        {
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                bt_save.Background = Brushes.Lime;

            }));

            this.Save();
        }

        public void SetMainCState(string volt)
        {
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                this.mainCStateLb1.Content = volt.Replace("_", " ");
            }));
        }

        public void SetMainCurrent(string volt)
        {
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                this.mainCurrentLb1.Content = volt + " A";
            }));
        }

        public void SetMainVoltage(string volt)
        {
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                this.mainVoltageLb1.Content = volt + " V";
            }));
        }

        /// <summary>
        /// UI의 로깅창 더블클릭시 표시
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void StateLb_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if ((sender as ListBox).SelectedItem == null)
                return;

            MessageBox.Show((sender as ListBox).SelectedItem.ToString());
        }

        private void StopClick(object sender, RoutedEventArgs e)
        {
            StopAuto();
        }


        private void PauseClick(object sender, RoutedEventArgs e)
        {
            LogState(LogType.Info, "Pause Clicked");
            ispause_ = !ispause_;
        }

        private void StartClick(object sender, RoutedEventArgs e)
        {
            LogState(LogType.Info, "Start Auto Button Started");
            AutoMode();
        }

        private void CyclerSettingsClick(object sender, RoutedEventArgs e)
        {
            var rp = new RequirePasswordWindow(this);
            rp.ShowDialog();
            if (rp.isOK)
            {
                mmw.savedCb.IsChecked = false;
                mmw.Show();
            }
            else
            {
                MessageBox.Show("Not Matched Password", "Info", MessageBoxButton.OK, MessageBoxImage.Stop);

            }
            rp.Close();
        }

        private void OpenResultClick(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start("explorer.exe", @"C:\Logs\Inspection_result\" + MODEL_NAME);
        }

        private void OpenLogClick(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start("explorer.exe", @"C:\Users\Public\EOL_INSPECTION_LOG");
        }

        private void StateLb_KeyUp_0(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                StateLb.Items.Clear();
            }
        }

        private void StateLb_KeyUp_1(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                StateLb1.Items.Clear();
            }
        }

        private void StateLb_KeyUp_2(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                StateLb2.Items.Clear();
            }
        }

        private void StateLb_KeyUp_3(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                StateLb3.Items.Clear();
            }
        }

        #region list double click Event
        public Point pPoint;
        public ListWindow cp;
        public List<doubleValue> tempViewList = new List<doubleValue>();
        public List<doubleValue> cellViewList = new List<doubleValue>();
        private void testItemListDg_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (testItemListDg.SelectedIndex == -1)
                return;

            var item = this.modelList[selectedIndex].TestItemList.ToList()[testItemListDg.SelectedIndex];

            switch (item.Key)
            {
                case "Check Delta Temp Sensors(each other) before DCIR":
                    {
                        if (tempViewList.Count == 0)
                            return;

                        if (cp != null && cp.IsLoaded)
                            cp.Close();

                        cp = new ListWindow(this, tempViewList);

                    }; break;
                case "Check Delta Temp Sensors(each other) After DCIR":
                    {
                        if (tempViewList.Count == 0)
                            return;

                        if (cp != null && cp.IsLoaded)
                            cp.Close();

                        cp = new ListWindow(this, tempViewList);

                    }; break;
                case "Cell Delta Voltage Before DCIR":
                    {
                        if (cellViewList.Count == 0)
                            return;

                        if (cp != null && cp.IsLoaded)
                            cp.Close();

                        cp = new ListWindow(this, cellViewList);

                    }; break;
                case "Cell Delta voltage After DCIR":
                    {
                        if (cellViewList.Count == 0)
                            return;

                        if (cp != null && cp.IsLoaded)
                            cp.Close();

                        cp = new ListWindow(this, cellViewList);

                    }; break;
                default: return;
            }

            pPoint = e.GetPosition(this);
            pPoint = this.PointToScreen(pPoint);

            double diff = System.Windows.SystemParameters.WorkArea.Height - pPoint.Y;
            if (pPoint.Y > cp.Height && diff < cp.Height)
                pPoint.Y -= cp.Height;

            diff = System.Windows.SystemParameters.WorkArea.Width - pPoint.X;
            if (diff < cp.Width)
                pPoint.X -= cp.Width;

            cp.Top = pPoint.Y;
            cp.Left = pPoint.X;
            cp.Focus();
            cp.Show();
            cp.Closing -= cp_Closing;
            cp.Closing += cp_Closing;
        }

        void cp_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            cp = null;
            MemoryRefresh();
        }
        #endregion

        private void OpenRelayControllerClick(object sender, RoutedEventArgs e)
        {
            var rp = new RequirePasswordWindow(this);
            rp.ShowDialog();
            if (rp.isOK)
            {
                RelayControllerWindow rc = new RelayControllerWindow(this);
                rc.ShowDialog();
            }
            else
            {
                MessageBox.Show("Not Matched Password", "Info", MessageBoxButton.OK, MessageBoxImage.Stop);

            }
            rp.Close();
        }

        private void DTCClearClick(object sender, RoutedEventArgs e)
        {
            ClearDTC();
        }



        #endregion

        #region Logging / Save data
        Object obj = new Object();

        public void LogState(LogType lt, string str, Exception ec = null,
            bool isView = true, bool isSave = true, bool isVol = false, int index = 0, bool isTest = false, string testName = "")
        {
            var header = "";
            switch (lt)
            {
                case LogType.Info: header = "[I N F O],"; break;
                case LogType.Fail: header = "[F A I L],"; break;
                case LogType.Success: header = "[SUCCESS],"; break;
                case LogType.Pass: header = "[P A S S],"; break;
                case LogType.NG: header = "[N     G],"; break;
                case LogType.TEST: header = "[T E S T],"; break;
                case LogType.EMERGENCY: header = "[EMERGEN],"; break;
                case LogType.RESPONSE: header =  "[RESPNSE],"; break;
                case LogType.REQUEST: header =          "[REQUEST],"; break;
                case LogType.MANUALCONDITION: header = "[MANCOND],"; break;
                case LogType.PLC_RECV: header = "[PLCRECV],"; break;
                case LogType.PLC_SEND: header = "[PLCSEND],"; break;
                case LogType.CAN: header = ""; isView = false; break;
            }

            str = str.Replace("\n", "");
            StringBuilder sb = new StringBuilder();
            sb.Append(System.DateTime.Now.ToString("HH:mm:ss:fff,"));
            sb.Append(header);
            sb.Append(str);
            sb.Append(ec != null ? (" - " + ec.Message + " : " + ec.StackTrace + ",") : ",");
            if (isView)
            {
                //메인 UI에 비동기로 접근시켜서 로그를 새로고침 시킨다.
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    //UI에서 5천개이상 데이터가 쌓이면 강제로 비우도록 한다.
                    if (StateLb.Items.Count > 5000)
                        StateLb.Items.Clear();

                    try
                    {
                        StateLb.Items.Insert(0, sb.ToString());
                    }
                    catch (Exception)
                    {
                    }

                    switch (lt)
                    {
                        case LogType.Success:
                            {
                                if (StateLb2.Items.Count > 5000)
                                    StateLb2.Items.Clear();

                                try
                                {
                                    StateLb2.Items.Insert(0, str.ToString());
                                }
                                catch (Exception)
                                {
                                }
                            };break;
                        case LogType.Fail:
                            {
                                if (StateLb3.Items.Count > 5000)
                                    StateLb3.Items.Clear();

                                try
                                {
                                    StringBuilder sbb = new StringBuilder(); 
                                    sbb.Append(str);
                                    sbb.Append(ec != null ? (" - " + ec.Message + " : " + ec.StackTrace + ",") : ",");
                                    StateLb3.Items.Insert(0, sbb.ToString());
                                }
                                catch (Exception)
                                {
                                }
                            };break;
                        default:
                            {
                                if (StateLb1.Items.Count > 5000)
                                    StateLb1.Items.Clear();

                                try
                                {
                                    StateLb1.Items.Insert(0, str.ToString());
                                }
                                catch (Exception)
                                {
                                }
                            };break;
                    }
                    

                }));
            }

            var load = logaddr + "\\" + System.DateTime.Now.ToString("yyyyMMdd");

            if (!Directory.Exists(load))
            {
                Directory.CreateDirectory(load);
            }

            if (isSave)
            {
                var tBarcode = Barcode.Replace(":", "_").ToString().Replace(";", "_").ToString().Replace("\r\n", "").ToString();
                try
                {


                    if (lt == LogType.CAN)
                    {
                        //CAN 로그(충방전시에 로그)는 별도폴더에 저장된다.
                        if (!Directory.Exists(load + "\\CAN"))
                        {
                            Directory.CreateDirectory(load + "\\CAN");
                        }

                        lock (obj)
                        {
                            File.AppendAllText(load + "\\CAN\\" + tBarcode + "_" + System.DateTime.Now.ToString("HH") + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);
                        }

                        return;
                    }
                    if (isVol)
                    {
                        lock (obj)
                        {
                            File.AppendAllText(load + "\\" + Barcode + "_" + System.DateTime.Now.ToString("HH") + "_Cycler" + index.ToString() + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);

                        }
                    }
                    else
                    {
                        if (isTest)
                        {
                            lock (obj)
                            {
                                File.AppendAllText(load + "\\" + Barcode + "_" + testName + "_" + System.DateTime.Now.ToString("HH") + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);

                            }
                        }
                        else
                        {
                            lock (obj)
                            {
                                File.AppendAllText(load + "\\" + Barcode + "_" + System.DateTime.Now.ToString("HH") + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);
                                File.AppendAllText(load + "\\AllDay_" + System.DateTime.Now.ToString("yyyyMMdd") + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);
                            }
                        }
                    }

                    //lock (obj)
                    //{

                    //    File.AppendAllText(load + "\\" + tBarcode + "_" + System.DateTime.Now.ToString("HH") + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);
                    //}
                }
                catch (Exception ecs)
                {
                    tBarcode = "NOT_POSSIBLE_FILE_NAME";
                    File.AppendAllText(load + "\\" + tBarcode + "_" + System.DateTime.Now.ToString("HH") + ".txt", sb.ToString() + "\r\n", Encoding.UTF8);                    
                }

            }
        }
        /// <summary>
        /// 23.  Save() 함수 요청반영사항
        ///      -> 상세수집항목 저장 정렬구문 추가(헤더/내용 모두)
        ///      -> 저장항목 define(LOT id, Module BCR, Device STAT 등 코드 헤더 및 저장내용 참조)
        ///      -> 바코드 항목 예외구문 추가
        ///      -> 착공 NG 시 NG 처리구문 추가
        /// </summary>
        private void Save()
        {
            string @LogDirectory = FILE_PATH_INSPECTION_RESULT + "\\" + this.modelList[selectedIndex].ModelId;            

            if (!Directory.Exists(@LogDirectory))
            {
                Directory.CreateDirectory(@LogDirectory);
            }

            //190104 by grchoi
            List<DetailItems> dlist = new List<DetailItems>();  //20181224 wjs detail order
            foreach (var item in this.modelList[selectedIndex].TestItemList)
            {
                //상세수집 데이터 모으기
                if (item.Value.refValues_.Count != 0)
                {
                    foreach (var ritem in item.Value.refValues_) dlist.Add(ritem as DetailItems);
                }
            }
            var orderedList = dlist.OrderBy(x => x.order);

            var dir = @LogDirectory + "\\" + System.DateTime.Now.ToString("[yyyy-MM-dd]EOL_RESULT") + ".txt";
            var subdir = @LogDirectory + "\\" + System.DateTime.Now.ToString("[yyyy-MM-dd]EOL_RESULT_FILE_OPENED") + ".txt";

            // 파일이 없다면 최초에 컬럼을 박아넣어야함.
            if (!File.Exists(dir))
            {
                //190106 by grchoi
                var header = "PASS FAIL,STATION,LOT_ID,MODULE_BCR,IS_MES_SKIP,DEVICE_STAT,Retry,";
                foreach (var item in this.modelList[selectedIndex].TestItemList)
                {
                    //190104 by grchoi
                    if (item.Key.Replace(" ", "") == _BARCODE) continue;

                    header += item.Key + ",";
                }

                //190104 by grchoi
                foreach (var item in orderedList) header += (item as DetailItems).Key + ",";

                header += "StartTime,ElapsedTime";
                File.AppendAllText(dir, header + "\r\n", Encoding.UTF8);
            }

            var first = "PASS";
            //190108 by grchoi
            if (!stjob) first = "NG";

            foreach (var item in this.modelList[selectedIndex].TestItemList)
            {
                //190104 by grchoi
                if (item.Key.Replace(" ", "") == _BARCODE) continue;
                if (item.Value.Result != null && item.Value.Result != "PASS") first = "NG";
            }

            var tail = first + ",";

            StringBuilder sb = new StringBuilder();
            sb.Append(string.Format("{0},", position));
            sb.Append(Barcode);
            sb.Append(",");

            //190104 by grchoi
            sb.Append(string.Format("{0},", MonoFrame));
            sb.Append(string.Format("{0},", isMESskip == true ? "YES" : "NO"));
            if (deviceStatus == "") sb.Append(string.Format("{0},", "OK"));
            else sb.Append(string.Format("{0},", deviceStatus));
            if (withstandRetry) sb.Append("O");
            else sb.Append("-");
            sb.Append(",");
            withstandRetry = false;
            //sb.Append(position);
            //sb.Append(",");

            foreach (var item in this.modelList[selectedIndex].TestItemList)
            {
                //190104 by grchoi
                if (item.Key.Replace(" ", "") == _BARCODE) continue;

                sb.Append(string.Format("{0}", item.Value.Value_));

                /*if (item.Value.refValues_.Count != 0)
                {
                    foreach (var ritem in item.Value.refValues_)
                    {
                        var dti = ritem as DetailItems;

                        sb.Append("&");
                        for (int i = 0; i < dti.Reportitems.Count; i++)
                        {
                            sb.Append(string.Format("{0}&", dti.Reportitems[i].ToString()));
                        }
                        sb.Remove(sb.Length - 1, 1);
                    }
                }*/
                sb.Append(",");
            }

            //190104 by grchoi
            foreach (var ritem in orderedList)
            {
                var dti = ritem as DetailItems;

                for (int i = 0; i < dti.Reportitems.Count; i++)
                {
                    sb.Append(string.Format("{0}", dti.Reportitems[i].ToString()));
                    if (dti.Reportitems.Count != 1) sb.Append("&");
                }
                if (dti.Reportitems.Count != 1) sb.Remove(sb.Length - 1, 1);
                sb.Append(",");
            }

            this.Dispatcher.Invoke(new Action(() =>
            {
                sb.Append(this.time_start_tb.Text);
                sb.Append(",");
                sb.Append(this.time_elapsed_tb.Text);
            }));

            //190104 by grchoi
            try { File.AppendAllText(dir, tail + sb.ToString() + "\r\n", Encoding.UTF8); }
            catch (Exception)
            {
                this.LogState(LogType.Fail, "Save Data - File is open");
                File.AppendAllText(subdir, tail + sb.ToString() + "\r\n", Encoding.UTF8);
            }

            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                this.LogState(LogType.Info, "Save Data");
            }));
        }

        #endregion

        /// <summary>
        /// 항목이 진행중임을 표시하는 메서드.
        /// 일시정지일때, 해당부분에 일시정지 무한루프로 걸린다.
        /// </summary>
        /// <param name="ti"></param>
        public void isProcessingUI(TestItem ti)
        {
            //24. 수동검사로그저장을위해 해당함수에서 lotTb의 스트링 저장구문 추가
            //190104 by grchoi
            this.Dispatcher.Invoke(new Action(() =>
            {
                modelList[selectedIndex].LotId = Barcode = this.lotTb.Text;
            }));

            if (ispause)
            {
                LogState(LogType.Info, "Pause");
            }

            bool isg = false;
            while (ispause)
            {
                isg = true;
            }
            if (isg)
            {
                LogState(LogType.Info, "Resume");
            }

            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                if (isManual)
                    blinder.Visibility = System.Windows.Visibility.Visible;
            }));

            isProcessingFlag = true;
            AutoScrolling(ti);
            //relays.Reset();

            LogState(LogType.Info, "-----------------------------------------------------------------", null, false);
            LogState(LogType.Info, "Test :" + ti.Name + " Start");

            SetYellow(ti.Bt);

            relays.RelayOff("IDO_1");
            relays.RelayOn("IDO_2");


        }

        private void AutoScrolling(TestItem testItem)
        {
            if (!isAutoScr)
                return;

            var index = GetIndex(this.modelList[selectedIndex].TestItemList, testItem.Name);
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                testItemListDg.SelectedIndex = index;
                testItemListDg.ScrollIntoView(testItemListDg.SelectedItem);
            }));
        }

        public int GetIndex(Dictionary<string, TestItem> dictionary, string key)
        {
            for (int index = 0; index < dictionary.Count; index++)
            {
                if (dictionary.Skip(index).First().Value.Name == key)
                    return index; // We found the item
            }

            return -1;
        }

        #region UI 변경 메서드

        private void SetYellow(Button bt)
        {
            this.Dispatcher.Invoke(new Action(() =>
            {
                bt.Background = Brushes.Yellow;
            }));
        }

        bool isYellow(Button bt)
        {
            bool rtv = false;
            this.Dispatcher.Invoke(new Action(() =>
            {

                if (bt.Background == Brushes.Yellow)
                    rtv = true;
                else
                    rtv = false;
            }));
            return rtv;
        }

        bool isProcessingFlag = false;

        private bool SetCtrlToPass(bool isPass, TestItem item, Button bt = null)
        {
            //relays.RelayOff("IDO_2");
            //relays.RelayOn("IDO_1");

            LogState(LogType.Info, "-----------------------------------------------------------------", null, false);
            bool rtv = false;
            if (isPass)
            {
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    if (bt != null)
                        bt.Background = Brushes.Lime;
                    else
                        item.Bt.Background = Brushes.Lime;
                }));
                rtv = true;
            }
            else
            {
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    if (bt != null)
                        bt.Background = Brushes.Red;
                    else
                        item.Bt.Background = Brushes.Red;
                }));
            }

            if (isStop)
                return false;

            return rtv;
        }

        /// <summary>
        /// isStop flag 내장
        /// </summary>
        /// <param name="isPass"></param>
        /// <param name="btName"></param>
        /// <returns></returns>
        private bool SetCtrlToPass(bool isPass, string btName)
        {
            //relays.RelayOff("IDO_2");
            //relays.RelayOn("IDO_1");

            LogState(LogType.Info, "-----------------------------------------------------------------", null, false);
            bool rtv = false;
            if (isPass)
            {
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    var bt = (Button)this.FindName(btName);
                    bt.Background = Brushes.Lime;
                }));
                rtv = true;
            }
            else
            {
                this.Dispatcher.BeginInvoke(new Action(() =>
                {
                    var bt = (Button)this.FindName(btName);
                    bt.Background = Brushes.Red;
                }));
            }

            if (isStop)
                return false;

            return rtv;
        }

        private void Pass(bool isPass)
        {
            if (isPass)
            {
                bt_pass.Content = "PASS";
                bt_pass.Background = Brushes.Lime;
            }
            else
            {
                bt_pass.Content = "NG";
                bt_pass.Background = Brushes.Red;
            }
        }

        #endregion

        /// <summary>
        /// 강제 정지 메서드
        /// 일시정지 상태를 풀며, NG로 빠지게 한다.
        /// </summary>
        public void StopAuto()
        {
            LogState(LogType.EMERGENCY, "EMERGENCY STOPPED !!!");
            ispause = false;
            isStop = true;

            timetick.Stop();
        }

        private bool ispause_ = false;
        ContinueWindow pcw = new ContinueWindow();
        public bool ispause
        {
            get { return ispause_; }
            set
            {

                ispause_ = value;
                if (ispause_)
                {
                    this.Dispatcher.BeginInvoke(new Action(() =>
                    {
                        pausebt.IsChecked = true;
                        pcw = new ContinueWindow();
                        pcw.maintitle.Content = "PAUSE";
                        pcw.reason.Content = "Close the Door";
                        pcw.contibt.Visibility = Visibility.Collapsed;
                        pcw.Show();
                    }));
                }
                else
                {
                    this.Dispatcher.BeginInvoke(new Action(() =>
                    {
                        pausebt.IsChecked = false;
                        pcw.Close();
                    }));
                }

            }
        }
        

        private void isdummy(object sender, RoutedEventArgs e)
        {
            var rp = new RequirePasswordWindow(this);
            rp.ShowDialog();
            if (rp.isOK)
            {
                isDummy = true;
            }
            else
            {
                isDummyCb.IsChecked = false;
                e.Handled = true;
                isDummy = false;

                MessageBox.Show("Not Matched Password", "Info", MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        private void isNotdummy(object sender, RoutedEventArgs e)
        {
            isDummy = false;
        }

        bool isDummy = false;

        private void CellDetailDg_LayoutUpdated_1(object sender, EventArgs e)
        {

        }

    }
}
